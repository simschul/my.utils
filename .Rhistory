attr(x, "dim") <- NULL
attributes(x) <- c(atts, attributes(x))
}
if (isTRUE(normalize)) x <- normalize(x)
return(x)
}
#' @param x
#' @param fun
#' @param scale
#' @param normalize
#' @param ...
#'
#' @return
#' @export
#'
#' @examples
transform <- function(x, fun, fun_inverse,
scale = FALSE, normalize = FALSE, ...) {
if (!missing(fun)) {
x <- fun(x)
attr(x, "transformed:function") <- fun
}
if (isTRUE(scale) & isTRUE(normalize)) stop("scaling and normalization together does not make any sense. Please set either scale=FALSE or normalize=FALSE")
if (isTRUE(scale)) {
atts <- attributes(x)
x <- scale(x, ...)
attr(x, "dim") <- NULL
attributes(x) <- c(atts, attributes(x))
}
if (isTRUE(normalize)) x <- normalize(x)
return(x)
}
y <- transform(x, fun = function(x) sqrt(x),
scale = FALSE, normalize = FALSE)
y
#' @param x
#' @param fun
#' @param scale
#' @param normalize
#' @param ...
#'
#' @return
#' @export
#'
#' @examples
transform <- function(x, fun, fun_inverse,
scale = FALSE, normalize = FALSE, ...) {
if (!missing(fun)) {
x <- fun(x)
attr(x, "transformed:function") <- fun
attr(x, "transformed:inverse_function") <- fun_inverse
}
if (isTRUE(scale) & isTRUE(normalize)) stop("scaling and normalization together does not make any sense. Please set either scale=FALSE or normalize=FALSE")
if (isTRUE(scale)) {
atts <- attributes(x)
x <- scale(x, ...)
attr(x, "dim") <- NULL
attributes(x) <- c(atts, attributes(x))
}
if (isTRUE(normalize)) x <- normalize(x)
return(x)
}
y <- transform(x, fun = function(x) sqrt(x),
scale = FALSE, normalize = FALSE)
#' @param x
#' @param fun
#' @param scale
#' @param normalize
#' @param ...
#'
#' @return
#' @export
#'
#' @examples
transform <- function(x, fun, fun_inverse,
scale = FALSE, normalize = FALSE, ...) {
if (!missing(fun)) {
x <- fun(x)
attr(x, "transformed:function") <- fun
attr(x, "transformed:inverse_function") <- ifelse(missing(fun_inverse),
NULL, fun_inverse)
}
if (isTRUE(scale) & isTRUE(normalize)) stop("scaling and normalization together does not make any sense. Please set either scale=FALSE or normalize=FALSE")
if (isTRUE(scale)) {
atts <- attributes(x)
x <- scale(x, ...)
attr(x, "dim") <- NULL
attributes(x) <- c(atts, attributes(x))
}
if (isTRUE(normalize)) x <- normalize(x)
return(x)
}
y <- transform(x, fun = function(x) sqrt(x),
scale = FALSE, normalize = FALSE)
y
#' @param x
#' @param fun
#' @param scale
#' @param normalize
#' @param ...
#'
#' @return
#' @export
#'
#' @examples
transform <- function(x, fun, fun_inverse,
scale = FALSE, normalize = FALSE, ...) {
if (!missing(fun)) {
x <- fun(x)
attr(x, "transformed:function") <- fun
attr(x, "transformed:inverse_function") <- ifelse(missing(fun_inverse),
NULL, fun_inverse)
}
if (isTRUE(scale) & isTRUE(normalize)) stop("scaling and normalization together does not make any sense. Please set either scale=FALSE or normalize=FALSE")
if (isTRUE(scale)) {
atts <- attributes(x)
x <- scale(x, ...)
attr(x, "dim") <- NULL
attributes(x) <- c(atts, attributes(x))
}
if (isTRUE(normalize)) x <- normalize(x)
return(x)
}
y <- transform(x, fun = function(x) sqrt(x),
scale = FALSE, normalize = FALSE)
#' @param x
#' @param fun
#' @param scale
#' @param normalize
#' @param ...
#'
#' @return
#' @export
#'
#' @examples
transform <- function(x, fun, fun_inverse,
scale = FALSE, normalize = FALSE, ...) {
if (!missing(fun)) {
x <- fun(x)
attr(x, "transformed:function") <- fun
if (missing(fun_inverse)) attr(x, "transformed:inverse_function") <- NULL
else attr(x, "transformed:inverse_function") <- fun_inverse
}
if (isTRUE(scale) & isTRUE(normalize)) stop("scaling and normalization together does not make any sense. Please set either scale=FALSE or normalize=FALSE")
if (isTRUE(scale)) {
atts <- attributes(x)
x <- scale(x, ...)
attr(x, "dim") <- NULL
attributes(x) <- c(atts, attributes(x))
}
if (isTRUE(normalize)) x <- normalize(x)
return(x)
}
y <- transform(x, fun = function(x) sqrt(x),
scale = FALSE, normalize = FALSE)
y
y <- transform(x, fun = function(x) sqrt(x), fun_inverse = function(x) x^2,
scale = FALSE, normalize = FALSE)
y
is_inverse_function <- function(fun1, fun2) {
x <- runif(10)
return(fun1(fun2(x)) == x)
}
is_inverse_function(function(x) log(x), function(x) exp(x))
fun2 <- function(x) exp(x))
x <- runif(10)
fun1 <- function(x) log(x)
fun2 <- function(x) exp(x)
fun1(x)
fun1(fun2(x))
x
is_inverse_function <- function(fun1, fun2) {
x <- runif(10)
return(all.equal(fun1(fun2(x)), x))
}
is_inverse_function(fun1, fun2)
fun3 <- sqrt
is_inverse_function(fun1, fun3)
fun3
fun1 <- function(x) log(x-1)
fun2 <- function(x) exp(x)
is_inverse_function(fun1, fun2)
fun1 <- function(x) log(x+1)
is_inverse_function(fun1, fun2)
is_inverse_function <- function(fun1, fun2) {
x <- runif(1)
return(all.equal(fun1(fun2(x)), x))
}
is_inverse_function(fun1, fun2)
is_inverse_function <- function(fun1, fun2) {
x <- runif(1)
return((fun1(fun2(x)) == x))
}
is_inverse_function(fun1, fun2)
fun1 <- function(x) log(x)
is_inverse_function(fun1, fun2)
fun4 <- function(x) x^2
is_inverse_function(fun3, fun4)
is_inverse_function(fun4, fun3)
#' @param x
#' @param fun
#' @param scale
#' @param normalize
#' @param ...
#'
#' @return
#' @export
#'
#' @examples
transform <- function(x, fun, fun_inverse,
scale = FALSE, normalize = FALSE, ...) {
if (!missing(fun)) {
x <- fun(x)
attr(x, "transformed:function") <- fun
if (missing(fun_inverse)) attr(x, "transformed:inverse_function") <- NULL
else {
if (is_inverse_function(fun, fun_inverse)) {
attr(x, "transformed:inverse_function") <- fun_inverse
} else stop("fun and fun_inverse are not inverse to each other!")
}
}
if (isTRUE(scale) & isTRUE(normalize)) stop("scaling and normalization together does not make any sense. Please set either scale=FALSE or normalize=FALSE")
if (isTRUE(scale)) {
atts <- attributes(x)
x <- scale(x, ...)
attr(x, "dim") <- NULL
attributes(x) <- c(atts, attributes(x))
}
if (isTRUE(normalize)) x <- normalize(x)
return(x)
}
y <- transform(x, fun = function(x) sqrt(x), fun_inverse = function(x) x^2,
scale = FALSE, normalize = FALSE)
y <- transform(x, fun = log, fun_inverse = exp,
scale = FALSE, normalize = FALSE)
y
log(x)
rescale <- function(x, scaling_attributes) {
if (missing(scaling_attributes)) scaling_attributes <- attributes(x)
center <- "scaled:center" %in% names(scaling_attributes)
scale <- "scaled:scale" %in% names(scaling_attributes)
if (isFALSE(center) & isFALSE(scale)) {
warning("Argument x should have attribute `scaled:center` and/or `scaled:scale`")
return(x)
}
if (isTRUE(center) & isTRUE(scale)) {
x_unscaled <- x * scaling_attributes$`scaled:scale` + scaling_attributes$`scaled:center`
} else if (isFALSE(center)) {
x_unscaled <- x * scaling_attributes$`scaled:scale`
} else {
x_unscaled <- x + scaling_attributes$`scaled:center`
}
attr(x_unscaled, "scaled:scale") <- NULL
attr(x_unscaled, "scaled:center") <- NULL
return(x_unscaled)
}
has_attribute <- function(x, attribute) {
return(attribute %in% names(attributes(x)))
}
x
y
has_attribute(y, "transformed:function")
rescale
renormalize <- function(x) {
return(x * attributes(x)[["normalized:sum"]])
}
x
x %>% normalize %>% renormalize
sum(x)
renormalize <- function(x) {
x <- x * attributes(x)[["normalized:sum"]]
attr(x, "normalized:sum") <- NULL
return(x)
}
x %>% normalize %>% renormalize
attributes(y)
attributes(y)[["bla"]]
attributes(y)[["transformed:function"]]
attributes(y)[["transformed:function"]]
attributes(y)[["transformed:function"]](4)
retransform <- function(x, inverse_fun) {
# 1. rescale data
if (has_attribute(x, "scaled:center") | has_attribute(x, "scaled:scale")) {
x <- rescale(x)
}
# 2. re-normalize data
if (has_attribute(x, "normalized:sum")) {
x <- renormalize(x)
}
# 3. retransform
if (has_attribute(x, "transformed:function")) {
if (missing(inverse_fun)) {
x <- inverse_fun(x)
} else if (has_attribute(x, "transformed:inverse_function")) {
x <- attr(x, "transformed:inverse_function")(x)
} else {
stop("No inverse function found! Please provide either `inverse_fun` or give x an attribute named `transformed:inverse_function`")
}
}
return(x)
}
y
retransform(y)
retransform <- function(x, inverse_fun) {
# 1. rescale data
if (has_attribute(x, "scaled:center") | has_attribute(x, "scaled:scale")) {
x <- rescale(x)
}
# 2. re-normalize data
if (has_attribute(x, "normalized:sum")) {
x <- renormalize(x)
}
# 3. retransform
if (has_attribute(x, "transformed:function")) {
if (!missing(inverse_fun)) {
x <- inverse_fun(x)
} else if (has_attribute(x, "transformed:inverse_function")) {
x <- attr(x, "transformed:inverse_function")(x)
} else {
stop("No inverse function found! Please provide either `inverse_fun` or give x an attribute named `transformed:inverse_function`")
}
}
return(x)
}
retransform(y)
retransform(y, inverse_fun = sqrt)
retransform(y, inverse_fun = exp)
retransform(y)
retransform <- function(x, inverse_fun) {
# 1. rescale data
if (has_attribute(x, "scaled:center") | has_attribute(x, "scaled:scale")) {
x <- rescale(x)
}
# 2. re-normalize data
if (has_attribute(x, "normalized:sum")) {
x <- renormalize(x)
}
# 3. retransform
if (has_attribute(x, "transformed:function")) {
if (!missing(inverse_fun)) {
if (!is_inverse_function(attr(x, "transformed:function"), inverse_fun)) {
stop("fun and fun_inverse are not inverse to each other!")
}
x <- inverse_fun(x)
} else if (has_attribute(x, "transformed:inverse_function")) {
x <- attr(x, "transformed:inverse_function")(x)
} else {
stop("No inverse function found! Please provide either `inverse_fun` or give x an attribute named `transformed:inverse_function`")
}
}
return(x)
}
retransform(y, sqrt)
retransform(y, exp)
x %>% scale %>% rescale()
x %>% normalize %>% renormalize
attr(x, "transformed:function") <- NULL
retransform <- function(x, inverse_fun) {
# 1. rescale data
if (has_attribute(x, "scaled:center") | has_attribute(x, "scaled:scale")) {
x <- rescale(x)
}
# 2. re-normalize data
if (has_attribute(x, "normalized:sum")) {
x <- renormalize(x)
}
# 3. retransform
if (has_attribute(x, "transformed:function")) {
if (!missing(inverse_fun)) {
if (!is_inverse_function(attr(x, "transformed:function"), inverse_fun)) {
stop("fun and fun_inverse are not inverse to each other!")
}
x <- inverse_fun(x)
} else if (has_attribute(x, "transformed:inverse_function")) {
x <- attr(x, "transformed:inverse_function")(x)
} else {
stop("No inverse function found! Please provide either `inverse_fun` or give x an attribute named `transformed:inverse_function`")
}
}
attr(x, "transformed:function") <- NULL
attr(x, "transformed:inverse_function") <- NULL
return(x)
}
x %>% scale %>% rescale()
x %>% transform(fun = log, fun_inverse = exp) %>% retransform
transform(fun = log, fun_inverse = exp)
x %>% transform(fun = log, fun_inverse = exp)
x %>% transform(fun = log, fun_inverse = exp)
x %>% transform(., fun = log, fun_inverse = exp)
is_inverse_function(exp, log)
is_inverse_function(log, exp)
runif(1)
is_inverse_function(exp, log)
is_inverse_function(exp, log)
is_inverse_function(exp, log)
is_inverse_function(exp, log)
is_inverse_function(exp, log)
is_inverse_function(exp, log)
is_inverse_function(exp, log)
is_inverse_function <- function(fun1, fun2) {
x <- runif(1, min = 0.5)
return(fun1(fun2(x)) == x)
}
is_inverse_function <- function(fun1, fun2) {
x <- runif(1, min = 0.5)
return(dplyr::near(fun1(fun2(x)),x))
}
is_inverse_function(exp, log)
x %>% transform(., fun = log, fun_inverse = exp)
x %>% transform(., fun = log, fun_inverse = exp) %>% retransform()
x
x %>% transform(., fun = log) %>% retransform(inverse_fun = exp)
x %>%
transform(., fun = log, fun_inverse = exp, scale = TRUE) %>%
retransform()
x %>%
transform(., fun = log, fun_inverse = exp,normalize = TRUE) %>%
retransform()
sqrt(2) ^ 2 == 2
near(sqrt(2) ^ 2, 2)
library(testthat)
library(usethis)
use_test("transformation")
x <- runif(1:10, min = -1, max = 1)
x
expect_equal(x %>% transform %>% retransform, x)
expect_equal(1,2)
expect_equal(x, x %>%
transform(., fun = log, fun_inverse = exp) %>%
retransform)
x <- runif(1:10, min = 0.01, max = 1)
expect_equal(x %>% scale %>% rescale, x)
expect_equal(x %>% normalize %>% renormalize, x)
x %>% scale %>% rescale
rescale <- function(x, scaling_attributes) {
if (missing(scaling_attributes)) scaling_attributes <- attributes(x)
center <- "scaled:center" %in% names(scaling_attributes)
scale <- "scaled:scale" %in% names(scaling_attributes)
if (isFALSE(center) & isFALSE(scale)) {
warning("Argument x should have attribute `scaled:center` and/or `scaled:scale`")
return(x)
}
if (isTRUE(center) & isTRUE(scale)) {
x_unscaled <- x * scaling_attributes$`scaled:scale` + scaling_attributes$`scaled:center`
} else if (isFALSE(center)) {
x_unscaled <- x * scaling_attributes$`scaled:scale`
} else {
x_unscaled <- x + scaling_attributes$`scaled:center`
}
attr(x_unscaled, "scaled:scale") <- NULL
attr(x_unscaled, "scaled:center") <- NULL
attr(x_unscaled, "dim") <- NULL
return(x_unscaled)
}
expect_equal(x %>% scale %>% rescale, x)
expect_equal(x %>% normalize %>% renormalize, x)
expect_equal(x %>% transform %>% retransform, x)
expect_equal(x, x %>%
transform(., fun = log, fun_inverse = exp) %>%
retransform)
expect_equal(x, x %>%
transform(., fun = log) %>%
retransform(fun_inverse = exp))
x %>%
transform(., fun = log)
retransform
x %>% transform(., fun = log) %>% retransform(inverse_fun = exp)
x
expect_equal(x, x %>%
transform(., fun = log) %>%
retransform(inverse_fun = exp))
x %>%
transform(., fun = log, fun_inverse = exp,normalize = TRUE) %>%
retransform()
expect_equal(x, x %>%
transform(., fun = log, scale = TRUE) %>%
retransform(inverse_fun = exp))
expect_equal(x, x %>%
transform(., fun = log, normalize = TRUE) %>%
retransform(inverse_fun = exp))
# is inverse function
expect_true(is_inverse_function(exp, log))
expect_true(is_inverse_function(log, exp))
expect_true(is_inverse_function(sqrt, function(x)x^2))
build()
library(devtools)
document()
build()
load_all()
a <- runif(10)
library(tidyverse)
a %>% transform(fun = exp, fun_inverse = log) %>% retransform
a
test()
load_all()
test()
document()
build()
library(data.table)
library(tidyverse)
mat <- matrix(runif(1E2), 1E1, 1E1)
mat
mat[sample(1:1E2, 5E1 , replace = FALSE)] <- -Inf
mat
IOvisualize(mat)
loadall
library(devtools)
load_all()
IOvisualize(mat)
library(devtools)
load_all()
vignette("DHARMa", package="DHARMa")
