if (is.null(colnames)) {
backtrans_needed <- TRUE
colnames <- data.table(col = paste0(1:ncol(mat)))
} else {
backtrans_needed <- FALSE
}
setnames(mat, unlist(colnames[,1]))
if (is.null(rownames)) {
rownames <- data.table(row = 1:nrow(mat))
}
dup_rows <- colnames(rownames) %in% colnames(colnames)
dup_cols <- colnames(colnames) %in% colnames(rownames)
colnames(rownames)[dup_rows] <- paste0(colnames(rownames)[dup_rows], suffices[1])
colnames(colnames)[dup_cols] <- paste0(colnames(colnames)[dup_cols], suffices[2])
mat <- cbind(rownames, mat)
#mat <- mat[, "row" := 1:.N]
mat <- data.table::melt(mat, id.vars = colnames(rownames),
na.rm = TRUE,
variable.name = colnames(colnames)[1])
if (ncol(colnames) > 1) {
merge(mat, colnames, by = colnames(colnames)[1])
}
if (backtrans_needed) mat[, col := as.integer(col)]
return(mat)
}
as.sparse.matrix(Z)
#' Title
#'
#' @param mat
#'
#' @return
#' @export
#'
#' @examples
as.sparse.matrix <- function(mat, rownames = NULL, colnames = NULL,
suffices = c('.row', '.col')) {
mat <- data.table::as.data.table(mat)
if (is.null(colnames)) {
backtrans_needed <- TRUE
colnames <- data.table(col = paste0(1:ncol(mat)))
} else {
backtrans_needed <- FALSE
}
setnames(mat, unlist(colnames[,1]))
if (is.null(rownames)) {
rownames <- data.table(row = 1:nrow(mat))
}
dup_rows <- colnames(rownames) %in% colnames(colnames)
dup_cols <- colnames(colnames) %in% colnames(rownames)
colnames(rownames)[dup_rows] <- paste0(colnames(rownames)[dup_rows], suffices[1])
colnames(colnames)[dup_cols] <- paste0(colnames(colnames)[dup_cols], suffices[2])
mat <- cbind(rownames, mat)
#mat <- mat[, "row" := 1:.N]
mat <- data.table::melt(mat, id.vars = colnames(rownames),
na.rm = TRUE,
variable.name = colnames(colnames)[1])
if (ncol(colnames) > 1) {
merge(mat, colnames, by = colnames(colnames)[1])
}
if (backtrans_needed) mat[, col := as.integer(col)]
return(mat[])
}
as.sparse.matrix(Z)
as.sparse.matrix(Z, colnames = colnames, rownames = rownames)
#' Title
#'
#' @param mat
#'
#' @return
#' @export
#'
#' @examples
as.sparse.matrix <- function(mat, rownames = NULL, colnames = NULL,
suffices = c('.row', '.col')) {
mat <- data.table::as.data.table(mat)
if (is.null(colnames)) {
backtrans_needed <- TRUE
colnames <- data.table(col = paste0(1:ncol(mat)))
} else {
backtrans_needed <- FALSE
}
setnames(mat, unlist(colnames[,1]))
if (is.null(rownames)) {
rownames <- data.table(row = 1:nrow(mat))
}
dup_rows <- colnames(rownames) %in% colnames(colnames)
dup_cols <- colnames(colnames) %in% colnames(rownames)
colnames(rownames)[dup_rows] <- paste0(colnames(rownames)[dup_rows], suffices[1])
colnames(colnames)[dup_cols] <- paste0(colnames(colnames)[dup_cols], suffices[2])
mat <- cbind(rownames, mat)
#mat <- mat[, "row" := 1:.N]
mat <- data.table::melt(mat, id.vars = colnames(rownames),
na.rm = TRUE,
variable.name = colnames(colnames)[1])
if (ncol(colnames) > 1) {
mat <- merge(mat, colnames, by = colnames(colnames)[1])
}
if (backtrans_needed) mat[, col := as.integer(col)]
return(mat[])
}
mat <- Z
colnames <- data.table(country = c(LETTERS[1:ncol(mat)]),
industry = letters[1:ncol(mat)])
rownames <- data.table(country = c(LETTERS[4 + (1:ncol(mat))]),
industry = letters[4 + (1:ncol(mat))])
as.sparse.matrix(Z, colnames = colnames, rownames = rownames)
setcolorder(mat, c(colnames(rownames), colnames(colnames)))
mat
#' Title
#'
#' @param mat
#'
#' @return
#' @export
#'
#' @examples
as.sparse.matrix <- function(mat, rownames = NULL, colnames = NULL,
suffices = c('.row', '.col')) {
mat <- data.table::as.data.table(mat)
if (is.null(colnames)) {
backtrans_needed <- TRUE
colnames <- data.table(col = paste0(1:ncol(mat)))
} else {
backtrans_needed <- FALSE
}
setnames(mat, unlist(colnames[,1]))
if (is.null(rownames)) {
rownames <- data.table(row = 1:nrow(mat))
}
dup_rows <- colnames(rownames) %in% colnames(colnames)
dup_cols <- colnames(colnames) %in% colnames(rownames)
colnames(rownames)[dup_rows] <- paste0(colnames(rownames)[dup_rows], suffices[1])
colnames(colnames)[dup_cols] <- paste0(colnames(colnames)[dup_cols], suffices[2])
mat <- cbind(rownames, mat)
#mat <- mat[, "row" := 1:.N]
mat <- data.table::melt(mat, id.vars = colnames(rownames),
na.rm = TRUE,
variable.name = colnames(colnames)[1])
if (ncol(colnames) > 1) {
mat <- merge(mat, colnames, by = colnames(colnames)[1])
}
if (backtrans_needed) mat[, col := as.integer(col)]
setcolorder(mat, c(colnames(rownames), colnames(colnames)))
return(mat[])
}
as.sparse.matrix(Z, colnames = colnames, rownames = rownames)
as.sparse.matrix(Z, colnames = colnames, rownames = rownames, suffices = c('x', 'y'))
mat
colnames
my.utils::\
my.utils::as.sparse.matrix
mat
mat <- data.table::as.data.table(mat)
colnames(mat) <- paste0(1:ncol(mat))
mat
is.vector(1:3)
is.vector(letter[1:3])
is.vector(letters[1:3])
mat <- Z
mat
mat <- data.table::as.data.table(mat)
mat
dup_rows <- colnames(rownames) %in% colnames(colnames)
dup_cols <- colnames(colnames) %in% colnames(rownames)
colnames(rownames)[dup_rows] <- paste0(colnames(rownames)[dup_rows], suffices[1])
colnames(colnames)[dup_cols] <- paste0(colnames(colnames)[dup_cols], suffices[2])
dup_rows
is.null(rownames)
!(is.null(rownames) | is.null(colnames))
mat <- Z
mat <- data.table::as.data.table(mat)
colnames(mat) <- paste0(1:ncol(mat))
mat
mat <- Z
mat <- data.table::as.data.table(mat)
mat
if (!(is.null(rownames) | is.null(colnames))) {
# check for duplicates
dup_rows <- colnames(rownames) %in% colnames(colnames)
dup_cols <- colnames(colnames) %in% colnames(rownames)
colnames(rownames)[dup_rows] <- paste0(colnames(rownames)[dup_rows], suffices[1])
colnames(colnames)[dup_cols] <- paste0(colnames(colnames)[dup_cols], suffices[2])
}
colnames
colnames
if (is.null(rownames)) {
rownames <- data.table(row = 1:nrow(mat))
}
rownames
mat <- cbind(rownames, mat)
mat
mat <- data.table::melt(mat, id.vars = colnames(rownames),
na.rm = TRUE,
variable.name = 'col')
mat
is.null(colnames)
mat
merge(mat, cbind(colnames, col = paste0(1:ncol(mat))),
by = 'col')
cbind(colnames, col = paste0(1:ncol(mat)))
mat
mat[, col := as.integer(substring(col, 2))]
mat
merge(mat, cbind(colnames, col = paste0(1:ncol(mat))),
by = 'col')
mat
options("datatable.print.class" = TRUE)
mat
merge(mat, cbind(colnames, col = (1:ncol(mat))),
by = 'col')
mat[, col := NULL]
setcolorder(mat, c(colnames(rownames), colnames(colnames)))
mat <- Z
mat <- data.table::as.data.table(mat)
mat
if (is.null(colnames)) {
colnames(mat) <- paste0(1:ncol(mat))
}
if (is.vector(colnames)) {
colnames(mat) <- colnames
}
setnames(mat, as.character(unlist(colnames[,1])))
mat
mat <- Z
mat <- data.table::as.data.table(mat)
if (is.null(colnames)) {
colnames(mat) <- paste0(1:ncol(mat))
}
if (is.vector(colnames)) {
colnames(mat) <- colnames
}
mat <- Z
mat <- data.table::as.data.table(mat)
colnames(mat) <- paste0(1:ncol(mat))
mat
mat <- Z
mat <- data.table::as.data.table(mat)
if (!(is.null(rownames) | is.null(colnames))) {
# check for duplicates
dup_rows <- colnames(rownames) %in% colnames(colnames)
dup_cols <- colnames(colnames) %in% colnames(rownames)
colnames(rownames)[dup_rows] <- paste0(colnames(rownames)[dup_rows], suffices[1])
colnames(colnames)[dup_cols] <- paste0(colnames(colnames)[dup_cols], suffices[2])
}
colnames
rownames
if (is.null(rownames)) {
rownames <- data.table(row = 1:nrow(mat))
}
mat <- cbind(rownames, mat)
mat
mat <- data.table::melt(mat, id.vars = colnames(rownames),
na.rm = TRUE,
variable.name = 'col')
mat
mat[, col := as.integer(substring(col, 2))]
mat
mat <- merge(mat, cbind(colnames, col = (1:ncol(mat))),
by = 'col')
mat
mat[, col := NULL]
setcolorder(mat, c(colnames(rownames), colnames(colnames)))
#' Title
#'
#' @param mat
#'
#' @return
#' @export
#'
#' @examples
as.sparse.matrix <- function(mat, rownames = NULL, colnames = NULL,
suffices = c('.row', '.col')) {
mat <- data.table::as.data.table(mat)
if (!(is.null(rownames) | is.null(colnames))) {
# check for duplicates
dup_rows <- colnames(rownames) %in% colnames(colnames)
dup_cols <- colnames(colnames) %in% colnames(rownames)
colnames(rownames)[dup_rows] <- paste0(colnames(rownames)[dup_rows], suffices[1])
colnames(colnames)[dup_cols] <- paste0(colnames(colnames)[dup_cols], suffices[2])
}
if (is.null(rownames)) {
rownames <- data.table(row = 1:nrow(mat))
}
mat <- cbind(rownames, mat)
mat <- data.table::melt(mat, id.vars = colnames(rownames),
na.rm = TRUE,
variable.name = 'col')
mat[, col := as.integer(substring(col, 2))]
if (is.null(colnames)) {
} else {
mat <- merge(mat, cbind(colnames, col = (1:ncol(mat))),
by = 'col')
mat[, col := NULL]
}
setcolorder(mat, c(colnames(rownames), colnames(colnames)))
return(mat[])
}
as.sparse.matrix(Z, colnames = colnames, rownames = rownames, suffices = c('x', 'y'))
as.sparse.matrix(Z, colnames = colnames[,1])
colnames[,1]
as.sparse.matrix(Z, colnames = colnames[,1], rownames = rownames)
invisible(lapply(paste0('package:', names(sessionInfo()$otherPkgs)), detach, character.only=TRUE, unload=TRUE))
invisible(lapply(paste0('package:', names(sessionInfo()$otherPkgs)), detach, character.only=TRUE, unload=TRUE))
library(data.table)
invisible(lapply(paste0('package:', names(sessionInfo()$otherPkgs)), detach, character.only=TRUE, unload=TRUE))
sessionInfo()$otherPkgs
library(data.table)
sessionInfo()$otherPkgs
detach_packages <- function() {
pkgs <- names(sessionInfo()$otherPkgs)
if (!is.null(pkgs))  invisible(lapply(paste0('package:', pkgs),
detach, character.only=TRUE, unload=TRUE))
return(NULL)
}
detach_packages()
rm(list = ls(all = TRUE))
print(symbol(("\326"))))
print(symbol(("\326")))
print(symbol("\326"))
print('✓')
print(✓'
print(✓'
print('✓')
message('✓')
clean_session <- function(restart = FALSE, gc = TRUE) {
clean_workspace(gc = gc)
message('✓ Workspace cleaned ')
detach_packages()
message('✓ Packages detached ')
if (isTRUE(restart)) {
restartR()
message('✓ R session restarted')
}
}
clean_workspace <- function(gc = TRUE) {
rm(list = ls(all = TRUE))
if (isTRUE(gc)) gc()
}
detach_packages <- function() {
pkgs <- names(sessionInfo()$otherPkgs)
if (!is.null(pkgs)) {
invisible(lapply(paste0('package:', pkgs),
detach, character.only=TRUE, unload=TRUE))
}
return(NULL)
}
restartR <- function() {
.rs.restartR()
}
clean_session()
clean_session(restart = TRUE)
document()
library(devtools)
document()
load_all()
document()
clean_session()
library(devtools)
document()
clean_session()
clean_workspace()
rm(list = ls(all = TRUE))
#' Title
#'
#' @param gc
#'
#' @return
#' @export
#'
#' @examples
clean_workspace <- function(gc = TRUE) {
rm(list = ls(all = TRUE))
if (isTRUE(gc)) gc()
}
clean_workspace()
a <- 3
clean_workspace()
#' Title
#'
#' @param gc
#'
#' @return
#' @export
#'
#' @examples
clean_workspace <- function(gc = TRUE) {
rm(list = ls(all = TRUE), envir = globalenv())
if (isTRUE(gc)) gc()
}
clean_workspace()
rm(list = ls(all = TRUE), envir = globalenv())
#' Title
#'
#' @param gc
#'
#' @return
#' @export
#'
#' @examples
clean_workspace <- function(gc = TRUE) {
rm(list = ls(all = TRUE), envir = globalenv())
if (isTRUE(gc)) gc()
}
#' Title
#'
#' @param gc
#'
#' @return
#' @export
#'
#' @examples
clean_workspace <- function(gc = TRUE) {
rm(list = ls(all = TRUE), envir = globalenv())
#if (isTRUE(gc)) gc()
}
a <- 3
clean_workspace()
ls(all = TRUE)
#' Title
#'
#' @param gc
#'
#' @return
#' @export
#'
#' @examples
clean_workspace <- function(gc = TRUE) {
print(ls(all = TRUE))
rm(list = ls(all = TRUE), envir = globalenv())
#if (isTRUE(gc)) gc()
}
clean_workspace()
print(ls(all = TRUE, envir = globalenv()))
#' Title
#'
#' @param gc
#'
#' @return
#' @export
#'
#' @examples
clean_workspace <- function(gc = TRUE) {
print(ls(all = TRUE, envir = globalenv()))
rm(list = ls(all = TRUE), envir = globalenv())
#if (isTRUE(gc)) gc()
}
clean_workspace()
rm(list = ls(all = TRUE), envir = globalenv())
#' Title
#'
#' @param gc
#'
#' @return
#' @export
#'
#' @examples
clean_workspace <- function() {
print(ls(all = TRUE, envir = globalenv()))
rm(list = ls(all = TRUE), envir = globalenv())
#if (isTRUE(gc)) gc()
}
a <- b
a <- 3
clean_workspace()
#' Title
#'
#' @param gc
#'
#' @return
#' @export
#'
#' @examples
clean_workspace <- function() {
print(ls(all = TRUE, envir = globalenv()))
rm(list = ls(all = TRUE, envir = globalenv()),
envir = globalenv())
#if (isTRUE(gc)) gc()
}
clean_workspace()
#' Title
#'
#' @param gc
#'
#' @return
#' @export
#'
#' @examples
clean_workspace <- function() {
rm(list = ls(all = TRUE, envir = globalenv()),
envir = globalenv())
if (isTRUE(gc)) gc()
}
clean_workspace()
a <- 4
#' Title
#'
#' @param gc
#'
#' @return
#' @export
#'
#' @examples
clean_workspace <- function() {
rm(list = ls(all = TRUE, envir = globalenv()),
envir = globalenv())
if (isTRUE(gc)) gc()
}
clean_workspace()
library(devtools)
document
document()
load_all()
