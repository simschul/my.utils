ly
Y
L
ly <- (L %*% (Y))
ly
L
Z
install.packages('tidyverse')
#' Title
#'
#' @param mat
#'
#' @return
#' @export
#'
#' @examples
as.sparse.matrix <- function(mat) {
mat <- data.table::as.data.table(mat)
colnames(mat) <- paste0(1:ncol(mat))
#cat(is.data.table(mat))
mat <- mat[, "row" := 1:.N]
# mat <- cbind(mat, row = 1:nrow(mat))
mat <- data.table::melt(mat, id.vars = "row", na.rm = TRUE,
variable.name = "col") %>%
.[, col := as.integer(col)] %>%
.[]
return(mat)
}
Z <- matrix(c(1,4,6,5,
5,2,4,3,
2,1,3,4,
4,3,1,2),
nrow = 4, ncol = 4)
Z
as.sparse.matrix(Z)
library(my.utils)
as.sparse.matrix(Z)
library(tidyverse)
library(data.table)
as.sparse.matrix(Z)
mat <- Z
namesc <- c(LETTERS[1:ncol(mat)])
namesc
namesc <- data.table(country = c(LETTERS[1:ncol(mat)]),
industry = letters[1:ncol(mat)])
namesc
namesc <- data.table(country = c(LETTERS[4 + (1:ncol(mat))]),
industry = letters[1:ncol(mat)])
namesr <- data.table(country = c(LETTERS[4 + (1:ncol(mat))]),
industry = letters[1:ncol(mat)])
namesr
namesr <- data.table(country = c(LETTERS[4 + (1:ncol(mat))]),
industry = letters[4 + (1:ncol(mat))])
namesr
mat <- data.table::as.data.table(mat)
mat
colnames(mat) <- paste0(1:ncol(mat))
mat
#cat(is.data.table(mat))
mat <- mat[, "row" := 1:.N]
mat
mat
cbind(mat, namesr)
mat <- cbind(mat, row = 1:nrow(mat))
mat
colnames <- data.table(country = c(LETTERS[1:ncol(mat)]),
industry = letters[1:ncol(mat)])
rownames <- data.table(country = c(LETTERS[4 + (1:ncol(mat))]),
industry = letters[4 + (1:ncol(mat))])
mat <- Z
mat <- data.table::as.data.table(mat)
paste0(1:ncol(mat))
cbind(rownames, mat)
rownames
colnames <- data.table(country = c(LETTERS[1:ncol(mat)]),
industry = letters[1:ncol(mat)])
rownames <- data.table(country = c(LETTERS[4 + (1:ncol(mat))]),
industry = letters[4 + (1:ncol(mat))])
rownames
colnames
cbind(rownames, mat)
rownames <- data.table(row = 1:nrow(mat))
rownames
colnames <- data.table(col = paste0(1:ncol(mat)))
colnames
cbind(rownames, mat)
setnames(mat, colnames[,1])
colnames[,1]
setnames(mat, colnames[,1][])
setnames(mat, unlist(colnames[,1]))
mat
colnames <- data.table(country = c(LETTERS[1:ncol(mat)]),
industry = letters[1:ncol(mat)])
rownames <- data.table(country = c(LETTERS[4 + (1:ncol(mat))]),
industry = letters[4 + (1:ncol(mat))])
setnames(mat, unlist(colnames[,1]))
mat
mat <- cbind(rownames, mat)
mat
colnames(rownames)
colnames(colnames)[1]
#mat <- mat[, "row" := 1:.N]
mat <- data.table::melt(mat, id.vars = colnames(rownames),
na.rm = TRUE,
variable.name = colnames(colnames)[1])
mat
colnames(colnames) %in% colnames(rownames)
colnames(colnames)
colnames(rownames)
mat
make.names(colnames(colnames))
make.names(colnames(colnames), unique = T)
make.names(c(colnames(colnames), colnames(rownames), unique = T)
make.names(c(colnames(colnames), colnames(rownames)), unique = T)
make.names(c(colnames(colnames), colnames(rownames)), unique = T)
make.names(c(colnames(colnames), colnames(rownames)), unique = F)
make.names(c(colnames(colnames), colnames(rownames)), unique = T)
#mat <- mat[, "row" := 1:.N]
duplicated(data.frame(colnames(colnames),
colnames(rownames)))
colnames(colnames)
data.frame(colnames(colnames),
colnames(rownames))
#mat <- mat[, "row" := 1:.N]
duplicated(c(colnames(colnames),
colnames(rownames)))
#mat <- mat[, "row" := 1:.N]
duplicated(c(colnames(colnames), colnames(rownames)))
colnames(rownames)
colnames(rownames, prefix = 'reo')
mat <- data.table::melt(mat, id.vars = colnames(rownames),
na.rm = TRUE,
variable.name = colnames(colnames)[1])
make.unique(c(colnames(colnames), colnames(rownames)))
make.unique(c(colnames(colnames), colnames(rownames)), suffix = '.')
make.unique(c(colnames(colnames), colnames(rownames)), sep = '.row')
make.unique(c(colnames(colnames), colnames(rownames)))
mat <- Z
colnames <- data.table(country = c(LETTERS[1:ncol(mat)]),
industry = letters[1:ncol(mat)])
rownames <- data.table(country = c(LETTERS[4 + (1:ncol(mat))]),
industry = letters[4 + (1:ncol(mat))])
mat <- data.table::as.data.table(mat)
setnames(mat, unlist(colnames[,1]))
mat
mat <- cbind(rownames, mat)
#mat <- mat[, "row" := 1:.N]
mat <- data.table::melt(mat, id.vars = colnames(rownames),
na.rm = TRUE,
variable.name = colnames(colnames)[1])
mat
c(1,2,3) %in% c(1,2)
colnames(colnames) %in% colnames(rownames)
colnames(colnames)[colnames(colnames) %in% colnames(rownames))]
colnames(colnames)[colnames(colnames) %in% colnames(rownames)]
dups <- colnames(colnames) %in% colnames(rownames)
dups
dup_cols <- colnames(colnames) %in% colnames(rownames)
colnames(colnames)[dup_cols] <- paste0(colnames(colnames)[dup_cols], suffices[2])
suffices = c('.row', '.col')
colnames(colnames)[dup_cols] <- paste0(colnames(colnames)[dup_cols], suffices[2])
colnames
dup_rows <- colnames(rownames) %in% colnames(colnames)
dup_rows
colnames <- data.table(country = c(LETTERS[1:ncol(mat)]),
industry = letters[1:ncol(mat)])
rownames <- data.table(country = c(LETTERS[4 + (1:ncol(mat))]),
industry = letters[4 + (1:ncol(mat))])
dup_cols <- colnames(colnames) %in% colnames(rownames)
dup_cols
dup_rows <- colnames(rownames) %in% colnames(colnames)
dup_rows
colnames(rownames)[dup_rows] <- paste0(colnames(rownames)[dup_rows], suffices[1])
colnames(colnames)[dup_cols] <- paste0(colnames(colnames)[dup_cols], suffices[2])
mat <- data.table::melt(mat, id.vars = colnames(rownames),
na.rm = TRUE,
variable.name = colnames(colnames)[1])
mat <- Z
colnames <- data.table(country = c(LETTERS[1:ncol(mat)]),
industry = letters[1:ncol(mat)])
rownames <- data.table(country = c(LETTERS[4 + (1:ncol(mat))]),
industry = letters[4 + (1:ncol(mat))])
mat <- data.table::as.data.table(mat)
setnames(mat, unlist(colnames[,1]))
dup_rows <- colnames(rownames) %in% colnames(colnames)
dup_cols <- colnames(colnames) %in% colnames(rownames)
colnames(rownames)[dup_rows] <- paste0(colnames(rownames)[dup_rows], suffices[1])
colnames(colnames)[dup_cols] <- paste0(colnames(colnames)[dup_cols], suffices[2])
dup_cols
rownames
colnames
setnames(mat, unlist(colnames[,1]))
mat
mat <- cbind(rownames, mat)
mat
mat <- data.table::melt(mat, id.vars = colnames(rownames),
na.rm = TRUE,
variable.name = colnames(colnames)[1])
mat
merge(mat, colnames, by = colnames(colnames)[1])
#' Title
#'
#' @param mat
#'
#' @return
#' @export
#'
#' @examples
as.sparse.matrix <- function(mat, rownames = NULL, colnames = NULL,
suffices = c('.row', '.col')) {
mat <- data.table::as.data.table(mat)
if (is.null(colnames)) {
backtrans_needed <- TRUE
colnames <- data.table(col = paste0(1:ncol(mat)))
} else {
backtrans_needed <- FALSE
}
setnames(mat, unlist(colnames[,1]))
if (is.null(rownames)) {
rownames <- data.table(row = 1:nrow(mat))
}
dup_rows <- colnames(rownames) %in% colnames(colnames)
dup_cols <- colnames(colnames) %in% colnames(rownames)
colnames(rownames)[dup_rows] <- paste0(colnames(rownames)[dup_rows], suffices[1])
colnames(colnames)[dup_cols] <- paste0(colnames(colnames)[dup_cols], suffices[2])
mat <- cbind(rownames, mat)
#mat <- mat[, "row" := 1:.N]
mat <- data.table::melt(mat, id.vars = colnames(rownames),
na.rm = TRUE,
variable.name = colnames(colnames)[1])
if (ncol(colnames) > 1) {
merge(mat, colnames, by = colnames(colnames)[1])
}
if (backtrans_needed) mat[, col := as.integer(col)]
return(mat)
}
as.sparse.matrix(Z)
#' Title
#'
#' @param mat
#'
#' @return
#' @export
#'
#' @examples
as.sparse.matrix <- function(mat, rownames = NULL, colnames = NULL,
suffices = c('.row', '.col')) {
mat <- data.table::as.data.table(mat)
if (is.null(colnames)) {
backtrans_needed <- TRUE
colnames <- data.table(col = paste0(1:ncol(mat)))
} else {
backtrans_needed <- FALSE
}
setnames(mat, unlist(colnames[,1]))
if (is.null(rownames)) {
rownames <- data.table(row = 1:nrow(mat))
}
dup_rows <- colnames(rownames) %in% colnames(colnames)
dup_cols <- colnames(colnames) %in% colnames(rownames)
colnames(rownames)[dup_rows] <- paste0(colnames(rownames)[dup_rows], suffices[1])
colnames(colnames)[dup_cols] <- paste0(colnames(colnames)[dup_cols], suffices[2])
mat <- cbind(rownames, mat)
#mat <- mat[, "row" := 1:.N]
mat <- data.table::melt(mat, id.vars = colnames(rownames),
na.rm = TRUE,
variable.name = colnames(colnames)[1])
if (ncol(colnames) > 1) {
merge(mat, colnames, by = colnames(colnames)[1])
}
if (backtrans_needed) mat[, col := as.integer(col)]
return(mat[])
}
as.sparse.matrix(Z)
as.sparse.matrix(Z, colnames = colnames, rownames = rownames)
#' Title
#'
#' @param mat
#'
#' @return
#' @export
#'
#' @examples
as.sparse.matrix <- function(mat, rownames = NULL, colnames = NULL,
suffices = c('.row', '.col')) {
mat <- data.table::as.data.table(mat)
if (is.null(colnames)) {
backtrans_needed <- TRUE
colnames <- data.table(col = paste0(1:ncol(mat)))
} else {
backtrans_needed <- FALSE
}
setnames(mat, unlist(colnames[,1]))
if (is.null(rownames)) {
rownames <- data.table(row = 1:nrow(mat))
}
dup_rows <- colnames(rownames) %in% colnames(colnames)
dup_cols <- colnames(colnames) %in% colnames(rownames)
colnames(rownames)[dup_rows] <- paste0(colnames(rownames)[dup_rows], suffices[1])
colnames(colnames)[dup_cols] <- paste0(colnames(colnames)[dup_cols], suffices[2])
mat <- cbind(rownames, mat)
#mat <- mat[, "row" := 1:.N]
mat <- data.table::melt(mat, id.vars = colnames(rownames),
na.rm = TRUE,
variable.name = colnames(colnames)[1])
if (ncol(colnames) > 1) {
mat <- merge(mat, colnames, by = colnames(colnames)[1])
}
if (backtrans_needed) mat[, col := as.integer(col)]
return(mat[])
}
mat <- Z
colnames <- data.table(country = c(LETTERS[1:ncol(mat)]),
industry = letters[1:ncol(mat)])
rownames <- data.table(country = c(LETTERS[4 + (1:ncol(mat))]),
industry = letters[4 + (1:ncol(mat))])
as.sparse.matrix(Z, colnames = colnames, rownames = rownames)
setcolorder(mat, c(colnames(rownames), colnames(colnames)))
mat
#' Title
#'
#' @param mat
#'
#' @return
#' @export
#'
#' @examples
as.sparse.matrix <- function(mat, rownames = NULL, colnames = NULL,
suffices = c('.row', '.col')) {
mat <- data.table::as.data.table(mat)
if (is.null(colnames)) {
backtrans_needed <- TRUE
colnames <- data.table(col = paste0(1:ncol(mat)))
} else {
backtrans_needed <- FALSE
}
setnames(mat, unlist(colnames[,1]))
if (is.null(rownames)) {
rownames <- data.table(row = 1:nrow(mat))
}
dup_rows <- colnames(rownames) %in% colnames(colnames)
dup_cols <- colnames(colnames) %in% colnames(rownames)
colnames(rownames)[dup_rows] <- paste0(colnames(rownames)[dup_rows], suffices[1])
colnames(colnames)[dup_cols] <- paste0(colnames(colnames)[dup_cols], suffices[2])
mat <- cbind(rownames, mat)
#mat <- mat[, "row" := 1:.N]
mat <- data.table::melt(mat, id.vars = colnames(rownames),
na.rm = TRUE,
variable.name = colnames(colnames)[1])
if (ncol(colnames) > 1) {
mat <- merge(mat, colnames, by = colnames(colnames)[1])
}
if (backtrans_needed) mat[, col := as.integer(col)]
setcolorder(mat, c(colnames(rownames), colnames(colnames)))
return(mat[])
}
as.sparse.matrix(Z, colnames = colnames, rownames = rownames)
as.sparse.matrix(Z, colnames = colnames, rownames = rownames, suffices = c('x', 'y'))
mat
colnames
my.utils::\
my.utils::as.sparse.matrix
mat
mat <- data.table::as.data.table(mat)
colnames(mat) <- paste0(1:ncol(mat))
mat
is.vector(1:3)
is.vector(letter[1:3])
is.vector(letters[1:3])
mat <- Z
mat
mat <- data.table::as.data.table(mat)
mat
dup_rows <- colnames(rownames) %in% colnames(colnames)
dup_cols <- colnames(colnames) %in% colnames(rownames)
colnames(rownames)[dup_rows] <- paste0(colnames(rownames)[dup_rows], suffices[1])
colnames(colnames)[dup_cols] <- paste0(colnames(colnames)[dup_cols], suffices[2])
dup_rows
is.null(rownames)
!(is.null(rownames) | is.null(colnames))
mat <- Z
mat <- data.table::as.data.table(mat)
colnames(mat) <- paste0(1:ncol(mat))
mat
mat <- Z
mat <- data.table::as.data.table(mat)
mat
if (!(is.null(rownames) | is.null(colnames))) {
# check for duplicates
dup_rows <- colnames(rownames) %in% colnames(colnames)
dup_cols <- colnames(colnames) %in% colnames(rownames)
colnames(rownames)[dup_rows] <- paste0(colnames(rownames)[dup_rows], suffices[1])
colnames(colnames)[dup_cols] <- paste0(colnames(colnames)[dup_cols], suffices[2])
}
colnames
colnames
if (is.null(rownames)) {
rownames <- data.table(row = 1:nrow(mat))
}
rownames
mat <- cbind(rownames, mat)
mat
mat <- data.table::melt(mat, id.vars = colnames(rownames),
na.rm = TRUE,
variable.name = 'col')
mat
is.null(colnames)
mat
merge(mat, cbind(colnames, col = paste0(1:ncol(mat))),
by = 'col')
cbind(colnames, col = paste0(1:ncol(mat)))
mat
mat[, col := as.integer(substring(col, 2))]
mat
merge(mat, cbind(colnames, col = paste0(1:ncol(mat))),
by = 'col')
mat
options("datatable.print.class" = TRUE)
mat
merge(mat, cbind(colnames, col = (1:ncol(mat))),
by = 'col')
mat[, col := NULL]
setcolorder(mat, c(colnames(rownames), colnames(colnames)))
mat <- Z
mat <- data.table::as.data.table(mat)
mat
if (is.null(colnames)) {
colnames(mat) <- paste0(1:ncol(mat))
}
if (is.vector(colnames)) {
colnames(mat) <- colnames
}
setnames(mat, as.character(unlist(colnames[,1])))
mat
mat <- Z
mat <- data.table::as.data.table(mat)
if (is.null(colnames)) {
colnames(mat) <- paste0(1:ncol(mat))
}
if (is.vector(colnames)) {
colnames(mat) <- colnames
}
mat <- Z
mat <- data.table::as.data.table(mat)
colnames(mat) <- paste0(1:ncol(mat))
mat
mat <- Z
mat <- data.table::as.data.table(mat)
if (!(is.null(rownames) | is.null(colnames))) {
# check for duplicates
dup_rows <- colnames(rownames) %in% colnames(colnames)
dup_cols <- colnames(colnames) %in% colnames(rownames)
colnames(rownames)[dup_rows] <- paste0(colnames(rownames)[dup_rows], suffices[1])
colnames(colnames)[dup_cols] <- paste0(colnames(colnames)[dup_cols], suffices[2])
}
colnames
rownames
if (is.null(rownames)) {
rownames <- data.table(row = 1:nrow(mat))
}
mat <- cbind(rownames, mat)
mat
mat <- data.table::melt(mat, id.vars = colnames(rownames),
na.rm = TRUE,
variable.name = 'col')
mat
mat[, col := as.integer(substring(col, 2))]
mat
mat <- merge(mat, cbind(colnames, col = (1:ncol(mat))),
by = 'col')
mat
mat[, col := NULL]
setcolorder(mat, c(colnames(rownames), colnames(colnames)))
#' Title
#'
#' @param mat
#'
#' @return
#' @export
#'
#' @examples
as.sparse.matrix <- function(mat, rownames = NULL, colnames = NULL,
suffices = c('.row', '.col')) {
mat <- data.table::as.data.table(mat)
if (!(is.null(rownames) | is.null(colnames))) {
# check for duplicates
dup_rows <- colnames(rownames) %in% colnames(colnames)
dup_cols <- colnames(colnames) %in% colnames(rownames)
colnames(rownames)[dup_rows] <- paste0(colnames(rownames)[dup_rows], suffices[1])
colnames(colnames)[dup_cols] <- paste0(colnames(colnames)[dup_cols], suffices[2])
}
if (is.null(rownames)) {
rownames <- data.table(row = 1:nrow(mat))
}
mat <- cbind(rownames, mat)
mat <- data.table::melt(mat, id.vars = colnames(rownames),
na.rm = TRUE,
variable.name = 'col')
mat[, col := as.integer(substring(col, 2))]
if (is.null(colnames)) {
} else {
mat <- merge(mat, cbind(colnames, col = (1:ncol(mat))),
by = 'col')
mat[, col := NULL]
}
setcolorder(mat, c(colnames(rownames), colnames(colnames)))
return(mat[])
}
as.sparse.matrix(Z, colnames = colnames, rownames = rownames, suffices = c('x', 'y'))
as.sparse.matrix(Z, colnames = colnames[,1])
colnames[,1]
as.sparse.matrix(Z, colnames = colnames[,1], rownames = rownames)
