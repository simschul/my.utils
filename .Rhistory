devtools::build()
document()
document()
load_all()
library(my.utils)
combine_words_regexp("bla")
document()
load_all()
library(my.utils)
my.utils::combine_words_regexp()
my.utils::combine_words_regexp(c("lkj", "lkjlsdfsd"))
library(devtools)
load_all()
document()
?IOvisualize
library(devtools)
load_all()
document()
zero_range(c(2,2,2,2,2,2))
zero_range(c(23,45,6,67,7))
load_all()
document()
zero_range(c(NA, 2,2,2,2, NA))
zero_range(c(NA, 2,2,2,2, NA), na.rm = FALSE)
v <- c(NA, NA, NA)
v <- c(NA, NA, NA)
is.na(v)
is.na(v) %>% sum
sum(is.na(v))
sum(is.na(v)) == length(v)
#' Title
#'
#' @param x
#' @param tol
#'
#' @return
#' @export
#'
#' @examples
zero_range <- function(x, tol = .Machine$double.eps ^ 0.5, na.rm = TRUE) {
if (length(x) == 1) return(TRUE)
if (sum(is.na(v)) == length(v)) return(NA)
abs(max(x, na.rm = na.rm) - min(x, na.rm = na.rm)) < tol
}
v <- c(NA, NA, NA)
v2 <- c(2,2,NA)
zero_range(v)
zero_range(v2)
v2 <- c(2,2,NA)
v2
zero_range(v2)
#' Title
#'
#' @param x
#' @param tol
#'
#' @return
#' @export
#'
#' @examples
zero_range <- function(x, tol = .Machine$double.eps ^ 0.5, na.rm = TRUE) {
if (length(x) == 1) return(TRUE)
if (sum(is.na(x)) == length(x)) return(NA)
abs(max(x, na.rm = na.rm) - min(x, na.rm = na.rm)) < tol
}
zero_range(v2)
zero_range(v2, na.rm = F)
load_all
load_all()
document()
library(devtools)
load_all()
document()
IOvisualize(matrix(runif(100), 10, 10))
library(tidyverse)
library(data.table)
IOvisualize(matrix(runif(100), 10, 10))
as.sparse.matrix(matrix(runif(100), 10, 10))
load_all
load_all(
)
as.sparse.matrix(matrix(runif(100), 10, 10))
load_all()
as.sparse.matrix(matrix(runif(100), 10, 10))
mat <- matrix(runif(9), 3,3)
mat
mat <- as.data.table(mat)
mat
mat <- mat[, row := 1:.N] %>%
data.table::melt(id.vars = "row", na.rm = TRUE,
variable.name = "col") %>%
.[, col := substring(col, 2) %>% as.integer] %>%
.[]
mat
library(data.table)
load_all()
as.sparse.matrix(matrix(runif(100), 10, 10))
mat <- matrix(runif(9), 3,3)
source('~/Documents/code/R/my.utils/R/MRIO_tools.R', echo=TRUE)
mat
mat <- as.data.table(mat)
mat
mat[, row := 1:.N]
mat
load_all()
as.sparse.matrix(matrix(runif(100), 10, 10))
load_all()
as.sparse.matrix(matrix(runif(100), 10, 10))
document()
load_all
load_all()
document()
mat <- matrix(runif(10000), 100, 100)
mat
library(my.utils)
IOvisualize(mat)
library(tidyverse)
IOvisualize(mat)
library(data.table)
IOvisualize(mat)
mat
mat <- data.table::as.data.table(mat)
mat
colnames(mat) <- paste0(1:ncol(mat))
mat <- mat[, row := 1:.N]
mat
mat <- data.table::melt(mat, id.vars = "row", na.rm = TRUE,
variable.name = "col") %>%
.[, col := col %>% as.integer] %>%
.[]
mat
as.sparse.matrix(mat)
#' Title
#'
#' @param mat
#'
#' @return
#' @export
#'
#' @examples
as.sparse.matrix <- function(mat) {
mat <- data.table::as.data.table(mat)
colnames(mat) <- paste0(1:ncol(mat))
cat(is.data.table(mat))
mat <- mat[, row := 1:.N]
mat <- data.table::melt(mat, id.vars = "row", na.rm = TRUE,
variable.name = "col") %>%
.[, col := col %>% as.integer] %>%
.[]
return(mat)
}
as.sparse.matrix(mat)
library(my.utils)
my.utils::as.sparse.matrix(mat)
library(my.utils)
my.utils::as.sparse.matrix(mat)
library(my.utils)
my.utils::as.sparse.matrix(mat)
mat <- data.table::as.data.table(mat)
mat
colnames(mat) <- paste0(1:ncol(mat))
cat(is.data.table(mat))
cat
print(mat)
mat <- cbind(mat, row = 1:nrow(mat))
mat
library(my.utils)
my.utils::as.sparse.matrix(mat)
library(my.utils)
library(my.utils)
my.utils::as.sparse.matrix(mat)
my.utils::as.sparse.matrix(mat)
library(my.utils)
library(my.utils)
my.utils::as.sparse.matrix(mat)
IOvisualize(mat)
library(my.utils)
IOvisualize(mat)
mat
mat <- matrix(runif(10000), 100, 100)
IOvisualize(mat)
library(sf)
library(my.utils)
IOvisualize(mat)
library(my.utils)
my.utils::as.sparse.matrix(mat)
mat
IOvisualize(mat)
library(my.utils)
IOvisualize(mat)
library(my.utils)
library(devtools)
load_all()
document()
library(devtools)
devtools::install()
build()
load_all()
document()
library(my.utils)
devtools::load_all(".")
remove.packages("my.utils")
library(my.utils)
mat <- runif(9, 3,3)
IOvisualize(mat)
mat <- runif(900, 30,30)
IOvisualize(mat)
mat <- matrix(runif(900), 30,30)
IOvisualize(mat)
library(data.table)
devtools::load_all(".")
IOvisualize(mat)
devtools::load_all(".")
IOvisualize(mat)
library(tidyverse)
library(sf)
library(mapview)
IOvisualize(mat)
mat
mat <- matrix(runif(900) + rnorm(900), 30,30)
IOvisualize(mat)
IOvisualize(mat)
mat[30,30] <- 1000
IOvisualize(mat)
mat <- matrix(runif(900,0,100), 30,30)
IOvisualize(mat)
mat <- matrix(runif(900,0,100), 30,30)
mat
mat <- matrix(runif(9,0,100), 3,3)
IOvisualize(mat)
devtools::load_all(".")
IOvisualize(mat)
IOvisualize(mat, legend = FALSE)
mat
mat %>% as.data.table %>% IOvisualize()
mat
res <- mat %>% as.sparse.matrix
res
##################################################
res <- res %>% .[, `:=`(row, -row)] %>% sf::st_as_sf(coords = c("col",
"row"),
remove = FALSE)
res
res$row <- -res$row
res[["abs_value"]] <- abs(res$value)
cex <- "abs_value"
mapview::mapview(res, alpha = 0.3, lwd = 0, cex = cex,
color = viridis::viridis,
zcol = "value", #layer.name = FALSE,
...)
mapview::mapview(res, alpha = 0.3, lwd = 0, cex = cex,
color = viridis::viridis,
zcol = "value"), #layer.name = FALSE,...)
}
mapview::mapview(res, alpha = 0.3, lwd = 0, cex = cex,
color = viridis::viridis,
zcol = "value"), #layer.name = FALSE,...)
}
mapview::mapview(res, alpha = 0.3, lwd = 0, cex = cex,
color = viridis::viridis,
zcol = "value")#layer.name = FALSE,...)
mapview::mapview(res, alpha = 0.3, lwd = 0, cex = cex,
color = viridis::viridis,
zcol = "value", layer.name = FALSE)#,...)
mapview::mapview(res, alpha = 0.3, lwd = 0, cex = cex,
color = viridis::viridis,
zcol = "value", layer.name = "value")#,...)
devtools::load_all(".")
IOvisualize(mat)
devtools::load_all(".")
IOvisualize(mat)
devtools::load_all(".")
IOvisualize(mat)
devtools::load_all(".")
IOvisualize(mat)
devtools::load_all(".")
IOvisualize(mat)
devtools::load_all(".")
IOvisualize(mat)
!(is.null(colnames(mat) &
is.null(rownames(mat)))
!(is.null(colnames(mat) &
is.null(rownames(mat))))
!(is.null(colnames(mat) &
is.null(rownames(mat))))
is.null(colnames(mat))
!is.null(colnames(mat))
!is.null(rownames(mat))
devtools::load_all(".")
IOvisualize(mat)
devtools::load_all(".")
IOvisualize(mat)
source('~/Documents/code/R/my.utils/R/MRIO_tools.R')
devtools::load_all(".")
source('~/Documents/code/R/my.utils/R/MRIO_tools.R')
IOvisualize(mat)
devtools::load_all(".")
IOvisualize(mat)
cat("\ncol ", !is.null(colnames(mat)))
source('~/Documents/code/R/my.utils/R/MRIO_tools.R')
devtools::load_all(".")
IOvisualize(mat)
devtools::load_all(".")
IOvisualize(mat)
source('~/Documents/code/R/my.utils/R/MRIO_tools.R')
IOvisualize(mat)
devtools::load_all(".")
IOvisualize(mat)
source('~/Documents/code/R/my.utils/R/MRIO_tools.R')
IOvisualize(mat)
source('~/Documents/code/R/my.utils/R/MRIO_tools.R')
devtools::load_all(".")
IOvisualize(mat)
source('~/Documents/code/R/my.utils/R/MRIO_tools.R')
devtools::load_all(".")
source('~/Documents/code/R/my.utils/R/MRIO_tools.R')
IOvisualize(mat)
source('~/Documents/code/R/my.utils/R/MRIO_tools.R')
devtools::load_all(".")
IOvisualize(mat)
FALSE | FALSE
devtools::load_all(".")
IOvisualize(mat)
devtools::load_all(".")
IOvisualize(mat)
source('~/Documents/code/R/my.utils/R/MRIO_tools.R')
devtools::load_all(".")
IOvisualize(mat)
source('~/Documents/code/R/my.utils/R/MRIO_tools.R')
devtools::load_all(".")
IOvisualize(mat)
source('~/Documents/code/R/my.utils/R/MRIO_tools.R')
devtools::load_all(".")
IOvisualize(mat)
source('~/Documents/code/R/my.utils/R/MRIO_tools.R')
devtools::load_all(".")
IOvisualize(mat)
source('~/Documents/code/R/my.utils/R/MRIO_tools.R')
devtools::load_all(".")
IOvisualize(mat)
source('~/Documents/code/R/my.utils/R/MRIO_tools.R')
devtools::load_all(".")
IOvisualize(mat)
colnames(mat)
is.null(NULL)
!is.null(NULL)
!is.null(NULL) & !is.null(NULL)
(!is.null(NULL) & !is.null(NULL))
(!is.null(NULL) & !is.null(NULL)) | FALSE
(!is.null(NULL) & !is.null(NULL)) | TRUE
(!is.null(NULL) & !is.null(NULL)) | missing(mat)
source('~/Documents/code/R/my.utils/R/MRIO_tools.R', echo=TRUE)
missing(mat)
(!is.null(NULL) & !is.null(NULL)) | !missing(mat)
missing(mat)
!missing(mat)
!missing(bla)
missing(attributes())
missing(attributes
)
devtools::load_all(".")
my.utils::IOvisualize(mat )
devtools::load_all(".")
rm(IOvisualize())
rm(IOvisualize
)
my.utils::IOvisualize(mat )
mat
colnames(mat) <- a:c
colnames(mat) <- A:C
colnames(mat) <- c("a", "b", "c")
rownames(mat) <- c("a", "b", "c")
mat
my.utils::IOvisualize(mat )
my.utils::IOvisualize(mat, attributes = list("lkjl") )
devtools::load_all(".")
my.utils::IOvisualize(mat, attributes = list("lkjl") )
my.utils::IOvisualize(mat )
a <- list(NULL, NULL)
a
lapply(a, is.null)
list("row" = data.frame(rownames = rownames(mat)),
"col" = data.frame(colnames = colnames(mat)))
rownames(mat)
rownames(mat) <- colnames(mat) <- NULL
rownames(mat)
list("row" = data.frame(rownames = rownames(mat)),
"col" = data.frame(colnames = colnames(mat)))
devtools::load_all(".")
my.utils::IOvisualize(mat )
devtools::load_all(".")
my.utils::IOvisualize(mat )
devtools::load_all(".")
my.utils::IOvisualize(mat )
test <-
list("row" = data.table(rownames = rownames(mat)),
"col" = data.table(colnames = colnames(mat)))
test
is.null(test)
is.null(test$row)
nrow(test$row)
sapply(test, nrow)
sapply(test, nrow) %>% sum == 0
devtools::load_all(".")
my.utils::IOvisualize(mat )
devtools::load_all(".")
my.utils::IOvisualize(mat )
rownames(mat) <- 1:3
colnames(mat) <- 1:3
my.utils::IOvisualize(mat )
my.utils::IOvisualize(mat, attributes = list("row" = data.table(1:3), "col" = data.table(1:3)) )
a
list
test
exists("row", test)
exists("row", test) | exists("col", test)
exists("row", test) & exists("col", test)
devtools::load_all(".")
my.utils::IOvisualize(mat, attributes = list("row" = data.table(1:3), "col" = data.table(1:3)) )
my.utils::IOvisualize(mat)
devtools::load_all(".")
library(my.utils)
rm(as.sparse.matrix, point2polygon)
library(my.utils)
devtools::load_all(".")
mat <- matrix(runif(9), 3,3)
mat
IOvisualize(mat, attributes = list("col" = c("b", "r", "r"), "row" = c("q", "e", "u")))
library(data.table, tidyverse)
IOvisualize(mat, attributes = list("col" = c("b", "r", "r"), "row" = c("q", "e", "u")))
library(data.table)
library(tidyverse)
IOvisualize(mat, attributes = list("col" = c("b", "r", "r"), "row" = c("q", "e", "u")))
IOvisualize(mat, attributes = list("col" = data.table("b", "r", "r"), "row" = data.table("q", "e", "u")))
devtools::load_all(".")
atts <- list("col" = data.table("b", "r", "r"), "row" = data.table("q", "e", "u"))
atts
atts <- list("col" = data.table(c("b", "r", "r")), "row" = data.table(c("q", "e", "u")))
atts
IOvisualize(mat, attributes = atts)
document()
library(devtools)
document()
library(my.utils)
my.utils::IOvisualize
IOvisualize(mat, attributes = atts)
atts
library(devtools)
library(my.utils)
document()
load_all()
devtools::load_all(".")
library(devtools)
build()
document()
build()
load_all()
document()
build()
tolower(2)
filename <- "test"
filename <- "test.R"
#' Title
#'
#' @param x
#' @param n
#'
#' @return
#' @export
#'
#' @examples
substrRight <- function(x, n){
nch <- nchar(x)
substr(x, nch-n+1, nch)
}
#' Title
#'
#' @param x
#' @param n
#'
#' @return
#' @export
#'
#' @examples
substr_right <- function(x, n){
nch <- nchar(x)
substr(x, nch-n+1, nch)
}
substrRight(filename,1)
substrRight(filename,2)
if (substr_right(filename,2) != ".R") filename <- paste0(filename, ".R")
filename
filename <- "test"
if (substr_right(filename,2) != ".R") filename <- paste0(filename, ".R")
filename
filename <- "test.vsc"
filename
if (substr_right(filename,2) != ".R") filename <- paste0(filename, ".R")
filename
devtools::load_all()
start_R_script(tempdir())
start_R_script(file.path(tempdir(), "test.R"))
start_R_script(file.path(tempdir(), "test.R"))
tempdir()
devtools::build
devtools::build()
devtools::document()
devtools::build()
devtools::build()
devtools::load_all()
devtools::build()
devtools::document()
