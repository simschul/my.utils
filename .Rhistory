mat <- data.table::melt(mat, id.vars = colnames(rownames),
na.rm = TRUE,
variable.name = 'col')
mat[, col := as.integer(substring(col, 2))]
if (is.null(colnames)) {
} else {
mat <- merge(mat, cbind(colnames, col = (1:ncol(mat))),
by = 'col')
mat[, col := NULL]
}
setcolorder(mat, c(colnames(rownames), colnames(colnames)))
as.sparse.matrix(mat, colnames = data.table(Var1 = LETTERS[1:3],
Var2 = letters[1:3]),
rownames = data.table(Var1 = LETTERS[4:6],
Var2 = letters[4:6])) %>% traceback
#' Title
#'
#' @param mat
#'
#' @return
#' @export
#'
#' @examples
as.sparse.matrix <- function(mat, rownames = NULL, colnames = NULL,
suffices = c('.row', '.col')) {
mat <- data.table::as.data.table(mat)
if (!(is.null(rownames) | is.null(colnames))) {
# check for duplicates
dup_rows <- colnames(rownames) %in% colnames(colnames)
dup_cols <- colnames(colnames) %in% colnames(rownames)
colnames(rownames)[dup_rows] <- paste0(colnames(rownames)[dup_rows], suffices[1])
colnames(colnames)[dup_cols] <- paste0(colnames(colnames)[dup_cols], suffices[2])
}
if (is.null(rownames)) {
rownames <- data.table(row = 1:nrow(mat))
}
mat <- cbind(rownames, mat)
mat <- data.table::melt(mat, id.vars = colnames(rownames),
na.rm = TRUE,
variable.name = 'col')
mat[, col := as.integer(substring(col, 2))]
if (is.null(colnames)) {
} else {
mat <- merge(mat, cbind(colnames, col = (1:ncol(mat))),
by = 'col')
mat[, col := NULL]
}
setcolorder(mat, c(colnames(rownames), colnames(colnames)))
return(mat[])
}
mat <- matrix(1:9, 3,3)
as.sparse.matrix(mat)
as.sparse.matrix()
as.sparse.matrix
debug(as.sparse.matrix(mat))
debug(as.sparse.matrix, mat)
debugonce(devtools::install)
debug(as.sparse.matrix)
as.sparse.matrix(mat)
print(mat)
debug(as.sparse.matrix)
as.sparse.matrix(mat,
colnames = data.table(Var1 = LETTERS[1:3], Var2 = letters[1:3]),
rownames = data.table(Var1 = LETTERS[4:6], Var2 = letters[4:6]))
print(rownames)
print(mat)
mat
print(mat)
dup_rows
debug(as.sparse.matrix)
as.sparse.matrix(mat,
colnames = data.table(Var1 = LETTERS[1:3], Var2 = letters[1:3]),
rownames = data.table(Var1 = LETTERS[4:6], Var2 = letters[4:6]))
print(mat)
print(mat)
print(mat)
print(mat)
colnames
print(colnames)
ncol(mat)
is.null(colnames)
colnames
cbind(colnames, col = (1:ncol(mat))
)
mat
#' Title
#'
#' @param mat
#'
#' @return
#' @export
#'
#' @examples
as.sparse.matrix <- function(mat, rownames = NULL, colnames = NULL,
suffices = c('.row', '.col')) {
mat <- data.table::as.data.table(mat)
if (!(is.null(rownames) | is.null(colnames))) {
# check for duplicates
dup_rows <- colnames(rownames) %in% colnames(colnames)
dup_cols <- colnames(colnames) %in% colnames(rownames)
colnames(rownames)[dup_rows] <- paste0(colnames(rownames)[dup_rows], suffices[1])
colnames(colnames)[dup_cols] <- paste0(colnames(colnames)[dup_cols], suffices[2])
}
if (is.null(rownames)) {
rownames <- data.table(row = 1:nrow(mat))
}
mat <- cbind(rownames, mat)
mat <- data.table::melt(mat, id.vars = colnames(rownames),
na.rm = TRUE,
variable.name = 'col')
mat[, col := as.integer(substring(col, 2))]
if (is.null(colnames)) {
} else {
mat <- merge(mat, cbind(colnames, col = (1:ncol(colnames))),
by = 'col')
mat[, col := NULL]
}
setcolorder(mat, c(colnames(rownames), colnames(colnames)))
return(mat[])
}
as.sparse.matrix(mat)
as.sparse.matrix(mat,
colnames = data.table(Var1 = LETTERS[1:3], Var2 = letters[1:3]),
rownames = data.table(Var1 = LETTERS[4:6], Var2 = letters[4:6]))
#' Title
#'
#' @param mat
#'
#' @return
#' @export
#'
#' @examples
as.sparse.matrix <- function(mat, rownames = NULL, colnames = NULL,
suffices = c('.row', '.col')) {
mat <- data.table::as.data.table(mat)
if (!(is.null(rownames) | is.null(colnames))) {
# check for duplicates
dup_rows <- colnames(rownames) %in% colnames(colnames)
dup_cols <- colnames(colnames) %in% colnames(rownames)
colnames(rownames)[dup_rows] <- paste0(colnames(rownames)[dup_rows], suffices[1])
colnames(colnames)[dup_cols] <- paste0(colnames(colnames)[dup_cols], suffices[2])
}
if (is.null(rownames)) {
rownames <- data.table(row = 1:nrow(mat))
}
mat <- cbind(rownames, mat)
mat <- data.table::melt(mat, id.vars = colnames(rownames),
na.rm = TRUE,
variable.name = 'col')
mat[, col := as.integer(substring(col, 2))]
if (is.null(colnames)) {
} else {
mat <- merge(mat, cbind(colnames, col = (1:nrow(colnames))),
by = 'col')
mat[, col := NULL]
}
setcolorder(mat, c(colnames(rownames), colnames(colnames)))
return(mat[])
}
as.sparse.matrix(mat,
colnames = data.table(Var1 = LETTERS[1:3], Var2 = letters[1:3]),
rownames = data.table(Var1 = LETTERS[4:6], Var2 = letters[4:6]))
load_all()
clean_workspace()
mat <- matrix(1:9, 3,3)
as.sparse.matrix(mat)
debug(as.sparse.matrix)
as.sparse.matrix(mat)
undebug(as.sparse.matrix)
as.sparse.matrix(mat)
undebug(as.sparse.matrix)
as.sparse.matrix(mat)
as.sparse.matrix(mat,
colnames = data.table(Var1 = LETTERS[1:3], Var2 = letters[1:3]),
rownames = data.table(Var1 = LETTERS[4:6], Var2 = letters[4:6]))
as.numeric(mat)
expect_equal(as.sparse.matrix(mat)$value,
as.numeric(mat))
as.sparse.matrix(mat)
test_that("from dense to sparse matrix works", {
expect_equal(as.sparse.matrix(mat)$value,
as.numeric(mat))
expect_equal(ncol(as.sparse.matrix(mat)),
3)
expect_equal(
ncol(as.sparse.matrix(mat,
colnames = data.table(Var1 = LETTERS[1:3], Var2 = letters[1:3]),
rownames = data.table(Var1 = LETTERS[4:6], Var2 = letters[4:6]))),
4
)
})
expect_equal(
ncol(as.sparse.matrix(mat,
colnames = data.table(Var1 = LETTERS[1:3], Var2 = letters[1:3]),
rownames = data.table(Var1 = LETTERS[4:6], Var2 = letters[4:6]))),
5
)
test_that("from dense to sparse matrix works", {
expect_equal(as.sparse.matrix(mat)$value,
as.numeric(mat))
expect_equal(ncol(as.sparse.matrix(mat)),
3)
expect_equal(
ncol(as.sparse.matrix(mat,
colnames = data.table(Var1 = LETTERS[1:3], Var2 = letters[1:3]),
rownames = data.table(Var1 = LETTERS[4:6], Var2 = letters[4:6]))),
5
)
})
mat
mat[1,3] <- NA
mat
test_that("from dense to sparse matrix works", {
expect_equal(as.sparse.matrix(mat)$value,
as.numeric(mat))
expect_equal(ncol(as.sparse.matrix(mat)),
3)
expect_equal(
ncol(as.sparse.matrix(mat,
colnames = data.table(Var1 = LETTERS[1:3], Var2 = letters[1:3]),
rownames = data.table(Var1 = LETTERS[4:6], Var2 = letters[4:6]))),
5
)
})
as.numeric(mat)
test_that("from dense to sparse matrix works", {
expect_equal(as.sparse.matrix(mat)$value,
na.omit(as.numeric(mat)))
expect_equal(ncol(as.sparse.matrix(mat)),
3)
expect_equal(
ncol(as.sparse.matrix(mat,
colnames = data.table(Var1 = LETTERS[1:3], Var2 = letters[1:3]),
rownames = data.table(Var1 = LETTERS[4:6], Var2 = letters[4:6]))),
5
)
})
na.omit(as.numeric(mat))
test_that("from dense to sparse matrix works", {
expect_equal(as.sparse.matrix(mat)$value,
na.omit(as.numeric(mat)))
expect_equal(ncol(as.sparse.matrix(mat)),
3)
expect_equal(
ncol(as.sparse.matrix(mat,
colnames = data.table(Var1 = LETTERS[1:3], Var2 = letters[1:3]),
rownames = data.table(Var1 = LETTERS[4:6], Var2 = letters[4:6]))),
5
)
})
test_that("from dense to sparse matrix works", {
expect_equal(as.sparse.matrix(mat)$value,
na.exclude(as.numeric(mat)))
expect_equal(ncol(as.sparse.matrix(mat)),
3)
expect_equal(
ncol(as.sparse.matrix(mat,
colnames = data.table(Var1 = LETTERS[1:3], Var2 = letters[1:3]),
rownames = data.table(Var1 = LETTERS[4:6], Var2 = letters[4:6]))),
5
)
})
na.exclude(as.numeric(mat))
na.exclude(as.numeric(mat))
test= na.exclude(as.numeric(mat))
str(test)
as.numeric(test)
test_that("from dense to sparse matrix works", {
expect_equal(as.sparse.matrix(mat)$value,
as.numeric(na.exclude(as.numeric(mat))))
expect_equal(ncol(as.sparse.matrix(mat)),
3)
expect_equal(
ncol(as.sparse.matrix(mat,
colnames = data.table(Var1 = LETTERS[1:3], Var2 = letters[1:3]),
rownames = data.table(Var1 = LETTERS[4:6], Var2 = letters[4:6]))),
5
)
})
as.sparse.matrix(mat) %>%
as.dense.matrix()
test_that("from dense to sparse matrix works", {
expect_equal(as.sparse.matrix(mat)$value,
as.numeric(na.exclude(as.numeric(mat))))
expect_equal(ncol(as.sparse.matrix(mat)),
3)
expect_equal(
ncol(as.sparse.matrix(mat,
colnames = data.table(Var1 = LETTERS[1:3], Var2 = letters[1:3]),
rownames = data.table(Var1 = LETTERS[4:6], Var2 = letters[4:6]))),
5
)
expect_equal(
as.dense.matrix(as.sparse.matrix(mat)),
mat
)
})
load_all()
document()
build()
library(testthat)
mat <- matrix(1:9, 3,3)
mat[1,3] <- NA
test_that("from dense to sparse matrix works", {
expect_equal(as.sparse.matrix(mat)$value,
as.numeric(na.exclude(as.numeric(mat))))
expect_equal(ncol(as.sparse.matrix(mat)),
3)
expect_equal(
ncol(as.sparse.matrix(mat,
colnames = data.table(Var1 = LETTERS[1:3], Var2 = letters[1:3]),
rownames = data.table(Var1 = LETTERS[4:6], Var2 = letters[4:6]))),
5
)
expect_equal(
as.dense.matrix(as.sparse.matrix(mat)),
mat
)
})
library(devtools)
load_all()
mat <- matrix(1:9, 3,3)
mat[1,3] <- NA
test_that("from dense to sparse matrix works", {
expect_equal(as.sparse.matrix(mat)$value,
as.numeric(na.exclude(as.numeric(mat))))
expect_equal(ncol(as.sparse.matrix(mat)),
3)
expect_equal(
ncol(as.sparse.matrix(mat,
colnames = data.table(Var1 = LETTERS[1:3], Var2 = letters[1:3]),
rownames = data.table(Var1 = LETTERS[4:6], Var2 = letters[4:6]))),
5
)
expect_equal(
as.dense.matrix(as.sparse.matrix(mat)),
mat
)
})
IOvisualize(mat)
test_that('IO visualations work', {
expect_output(IOvisualize(mat))
})
expect_success(IOvisualize(mat))
test_that('IO visualations work', {
expect_output(IOvisualize(mat))
expect_success(IOvisualize(mat))
})
test_that('IO visualations work', {
expect_output(IOvisualize(mat))
expect_silent(IOvisualize(mat))
})
test_that('IO visualations work', {
expect_output(IOvisualize(mat))
expect_silent(IOvisualize(mat))
})
test_that('IO visualations work', {
expect_silent(IOvisualize(mat))
})
expect_silent(IOvisualize(3))
test_that('IO visualations work', {
expect_silent(IOvisualize(mat))
expect_silent(IOvisualize(3))
})
mats <- as.sparse.matrix(mat)
mats
expect_silent(IOvisualize(mats))
IOvisualize(mats)
mats
mats2 <- copy(mats)
mats2[, row := as.character(row), col := as.character(col)]
mats2 <- copy(mats)
mats2[, row := as.character(row), col := as.character(col)]
mats2[, row := as.character(row)]
mats2[, col := as.character(col)]
test_that('IO visualations work', {
expect_silent(IOvisualize(mat))
expect_silent(IOvisualize(mats))
expect_silent(IOvisualize(mats2))
})
IOvisualize(mats2)
expect_silent(IOvisualize(mats2, attributes = mats2[, 1:2]))
IOvisualize(mats2, attributes = mats2[, 1:2])
mats2[, 1:2]
expect_silent(IOvisualize(mats, attributes = mats2[, 1:2]))
IOvisualize
expect_silent(IOvisualize(mats, attributes = list(mats2[, 1], mats2[,2]))
})
expect_silent(IOvisualize(mats, attributes = list(mats2[, 1], mats2[,2])))
mats2[, 1]
mats2[,2]
expect_silent(IOvisualize(mats, attributes = list(mats2[, 1], mats2[,2])))
mats2
expect_silent(IOvisualize(mats, attributes = list('row' = mats2[, 1],
'col' = mats2[,2])))
IOvisualize(mats, attributes = list('row' = mats2[, 1],
'col' = mats2[,2]))
?head
utils::head.matrix()
library(usethis)
pkgpath <- file.path(tempdir(), "testpkg")
create_package(pkgpath) # creates package below temp directory
proj_set(pkgpath)
## create github repository and configure as git remote
use_github()
## now, working inside "testpkg", initialize git repository
use_git()
## create github repository and configure as git remote
use_github()
## now, working inside "testpkg", initialize git repository
use_git()
## create github repository and configure as git remote
use_github()
brown()
browse_github_token()
edit_r_environ()
github_token()
#' Title
#'
#' @return
#' @export
#'
#' @examples
restartR <- function() {
.rs.restartR()
}
restartR()
github_token()
proj_set(pkgpath)
pkgpath
pkgpath <- file.path(tempdir(), "testpkg")
create_package(pkgpath) # creates package below temp directory
## now, working inside "testpkg", initialize git repository
use_git()
proj_set(pkgpath)
## now, working inside "testpkg", initialize git repository
use_git()
## create github repository and configure as git remote
use_github()
browse_github_token()
gh_token_help(host = NULL)
gitcreds::gh_token_help(host = NULL)
library(gitcreds)
gh_token_help(host = NULL)
library(usethi)
library(usethis)
proj_set(pkgpath)
## create github repository and configure as git remote
use_github()
edit_r_environ()
use_github()
restartR()
pkgpath <- file.path(tempdir(), "testpkg")
create_package(pkgpath) # creates package below temp directory
proj_set(pkgpath)
## now, working inside "testpkg", initialize git repository
use_git()
## create github repository and configure as git remote
use_github()
restartR()
pkgpath <- file.path(tempdir(), "testpkg")
create_package(pkgpath) # creates package below temp directory
proj_set(pkgpath)
## now, working inside "testpkg", initialize git repository
use_git()
## now, working inside "testpkg", initialize git repository
use_git(message = "Initial commit")
## create github repository and configure as git remote
use_github()
pkgpath <- file.path(tempdir(), "testpkg")
create_package(pkgpath) # creates package below temp directory
pkgpath <- file.path(tempdir(), "testpkg")
create_package(pkgpath) # creates package below temp directory
proj_set(pkgpath)
## now, working inside "testpkg", initialize git repository
use_git(message = "Initial commit")
## create github repository and configure as git remote
use_github()
restartR()
pkgpath <- file.path(tempdir(), "testpkg")
create_package(pkgpath, rstudio = FALSE) # creates package below temp directory
proj_set(pkgpath)
## now, working inside "testpkg", initialize git repository
use_git(message = "Initial commit")
## create github repository and configure as git remote
use_github()
github_token()
## create github repository and configure as git remote
use_github(private = TRUE)
github_token()
browse_github_token()
Sys.getenv('GITHUB_PAT')
## create github repository and configure as git remote
use_github(private = TRUE)
pkgpath <- file.path(tempdir(), "testpkg")
create_package(pkgpath, rstudio = FALSE) # creates package below temp directory
pkgpath <- file.path(tempdir(), "testpkg")
pkgpath
create_package(pkgpath, rstudio = FALSE) # creates package below temp directory
pkgpath <- file.path(tempdir(), "testpkg")
create_package(pkgpath, rstudio = FALSE) # creates package below temp directory
proj_set(pkgpath)
## now, working inside "testpkg", initialize git repository
use_git(message = "Initial commit")
## create github repository and configure as git remote
use_github(private = TRUE)
restartR()
tempdir()
tempdir()
tempdir()
tempdir()
tempdir()
