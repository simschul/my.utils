source('~/Documents/code/R/my.utils/R/MRIO_tools.R')
IOvisualize(mat)
source('~/Documents/code/R/my.utils/R/MRIO_tools.R')
devtools::load_all(".")
IOvisualize(mat)
source('~/Documents/code/R/my.utils/R/MRIO_tools.R')
devtools::load_all(".")
source('~/Documents/code/R/my.utils/R/MRIO_tools.R')
IOvisualize(mat)
source('~/Documents/code/R/my.utils/R/MRIO_tools.R')
devtools::load_all(".")
IOvisualize(mat)
FALSE | FALSE
devtools::load_all(".")
IOvisualize(mat)
devtools::load_all(".")
IOvisualize(mat)
source('~/Documents/code/R/my.utils/R/MRIO_tools.R')
devtools::load_all(".")
IOvisualize(mat)
source('~/Documents/code/R/my.utils/R/MRIO_tools.R')
devtools::load_all(".")
IOvisualize(mat)
source('~/Documents/code/R/my.utils/R/MRIO_tools.R')
devtools::load_all(".")
IOvisualize(mat)
source('~/Documents/code/R/my.utils/R/MRIO_tools.R')
devtools::load_all(".")
IOvisualize(mat)
source('~/Documents/code/R/my.utils/R/MRIO_tools.R')
devtools::load_all(".")
IOvisualize(mat)
source('~/Documents/code/R/my.utils/R/MRIO_tools.R')
devtools::load_all(".")
IOvisualize(mat)
colnames(mat)
is.null(NULL)
!is.null(NULL)
!is.null(NULL) & !is.null(NULL)
(!is.null(NULL) & !is.null(NULL))
(!is.null(NULL) & !is.null(NULL)) | FALSE
(!is.null(NULL) & !is.null(NULL)) | TRUE
(!is.null(NULL) & !is.null(NULL)) | missing(mat)
source('~/Documents/code/R/my.utils/R/MRIO_tools.R', echo=TRUE)
missing(mat)
(!is.null(NULL) & !is.null(NULL)) | !missing(mat)
missing(mat)
!missing(mat)
!missing(bla)
missing(attributes())
missing(attributes
)
devtools::load_all(".")
my.utils::IOvisualize(mat )
devtools::load_all(".")
rm(IOvisualize())
rm(IOvisualize
)
my.utils::IOvisualize(mat )
mat
colnames(mat) <- a:c
colnames(mat) <- A:C
colnames(mat) <- c("a", "b", "c")
rownames(mat) <- c("a", "b", "c")
mat
my.utils::IOvisualize(mat )
my.utils::IOvisualize(mat, attributes = list("lkjl") )
devtools::load_all(".")
my.utils::IOvisualize(mat, attributes = list("lkjl") )
my.utils::IOvisualize(mat )
a <- list(NULL, NULL)
a
lapply(a, is.null)
list("row" = data.frame(rownames = rownames(mat)),
"col" = data.frame(colnames = colnames(mat)))
rownames(mat)
rownames(mat) <- colnames(mat) <- NULL
rownames(mat)
list("row" = data.frame(rownames = rownames(mat)),
"col" = data.frame(colnames = colnames(mat)))
devtools::load_all(".")
my.utils::IOvisualize(mat )
devtools::load_all(".")
my.utils::IOvisualize(mat )
devtools::load_all(".")
my.utils::IOvisualize(mat )
test <-
list("row" = data.table(rownames = rownames(mat)),
"col" = data.table(colnames = colnames(mat)))
test
is.null(test)
is.null(test$row)
nrow(test$row)
sapply(test, nrow)
sapply(test, nrow) %>% sum == 0
devtools::load_all(".")
my.utils::IOvisualize(mat )
devtools::load_all(".")
my.utils::IOvisualize(mat )
rownames(mat) <- 1:3
colnames(mat) <- 1:3
my.utils::IOvisualize(mat )
my.utils::IOvisualize(mat, attributes = list("row" = data.table(1:3), "col" = data.table(1:3)) )
a
list
test
exists("row", test)
exists("row", test) | exists("col", test)
exists("row", test) & exists("col", test)
devtools::load_all(".")
my.utils::IOvisualize(mat, attributes = list("row" = data.table(1:3), "col" = data.table(1:3)) )
my.utils::IOvisualize(mat)
devtools::load_all(".")
library(my.utils)
rm(as.sparse.matrix, point2polygon)
library(my.utils)
devtools::load_all(".")
mat <- matrix(runif(9), 3,3)
mat
IOvisualize(mat, attributes = list("col" = c("b", "r", "r"), "row" = c("q", "e", "u")))
library(data.table, tidyverse)
IOvisualize(mat, attributes = list("col" = c("b", "r", "r"), "row" = c("q", "e", "u")))
library(data.table)
library(tidyverse)
IOvisualize(mat, attributes = list("col" = c("b", "r", "r"), "row" = c("q", "e", "u")))
IOvisualize(mat, attributes = list("col" = data.table("b", "r", "r"), "row" = data.table("q", "e", "u")))
devtools::load_all(".")
atts <- list("col" = data.table("b", "r", "r"), "row" = data.table("q", "e", "u"))
atts
atts <- list("col" = data.table(c("b", "r", "r")), "row" = data.table(c("q", "e", "u")))
atts
IOvisualize(mat, attributes = atts)
document()
library(devtools)
document()
library(my.utils)
my.utils::IOvisualize
IOvisualize(mat, attributes = atts)
atts
library(devtools)
library(my.utils)
document()
load_all()
devtools::load_all(".")
library(devtools)
build()
document()
build()
load_all()
document()
build()
tolower(2)
filename <- "test"
filename <- "test.R"
#' Title
#'
#' @param x
#' @param n
#'
#' @return
#' @export
#'
#' @examples
substrRight <- function(x, n){
nch <- nchar(x)
substr(x, nch-n+1, nch)
}
#' Title
#'
#' @param x
#' @param n
#'
#' @return
#' @export
#'
#' @examples
substr_right <- function(x, n){
nch <- nchar(x)
substr(x, nch-n+1, nch)
}
substrRight(filename,1)
substrRight(filename,2)
if (substr_right(filename,2) != ".R") filename <- paste0(filename, ".R")
filename
filename <- "test"
if (substr_right(filename,2) != ".R") filename <- paste0(filename, ".R")
filename
filename <- "test.vsc"
filename
if (substr_right(filename,2) != ".R") filename <- paste0(filename, ".R")
filename
devtools::load_all()
start_R_script(tempdir())
start_R_script(file.path(tempdir(), "test.R"))
start_R_script(file.path(tempdir(), "test.R"))
tempdir()
devtools::build
devtools::build()
devtools::document()
devtools::build()
devtools::build()
devtools::load_all()
devtools::build()
devtools::document()
library(devtools)
load_all()
mat <- matrix(runif(10000), 100, 100)
library(data.table)
my.utils::as.sparse.matrix(mat)
library(tidyverse)
my.utils::as.sparse.matrix(mat)
IOvisualize(mat)
my.utils::as.sparse.matrix(mat)
sample.int(1000)
?sample
mat[sample.int(1:10000, 1000)]
mat[sample.int(1:10000, 1000, replace = TRUE)]
mat[sample.int(1:10000, 1000, replace = TRUE)] <- 0
IOvisualize(mat)
mat[sample.int(1:10000, 10000, replace = TRUE)] <- 0
mat <- matrix(runif(10000), 100, 100)
mat[sample.int(1:10000, 10000, replace = TRUE)] <- 0
IOvisualize(mat)
mat[sample.int(1:10000, 10000, replace = FALSE)] <- 0
mat[sample.int(1:10000, 10000-1, replace = FALSE)] <- 0
mat <- matrix(runif(1E4), 1E2, 1E2)
mat
mat[sample.int(1:1E4, 1E3 , replace = FALSE)] <- 0
mat[sample(1:1E4, 1E3 , replace = FALSE)] <- 0
IOvisualize(mat)
dt <- my.utils::as.sparse.matrix(mat)
dt
mat <- matrix(runif(1E4), 1E2, 1E2)
mat[sample(1:1E4, 1E3 , replace = FALSE)] <- NA
dt <- my.utils::as.sparse.matrix(mat)
dt
mat[sample(1:1E4, 5E3 , replace = FALSE)] <- NA
mat <- matrix(runif(1E4), 1E2, 1E2)
mat[sample(1:1E4, 5E3 , replace = FALSE)] <- NA
dt <- my.utils::as.sparse.matrix(mat)
dt
IOvisualize(mat)
mat
IOvisualize(mat)
mat <- matrix(runif(1E4), 1E2, 1E2)
mat[sample(1:1E4, 5E3 , replace = FALSE)] <- 0
dt <- my.utils::as.sparse.matrix(mat)
IOvisualize(mat)
max(nrow(mat))
build()
load_all()
IOvisualize(mat)
maxpoints
ncol(mat)
nrow(mat)
ncol(mat) * nrow(mat)
threshold
min_threshold
threshold
threshold
min_threshold
mat <- matrix(runif(1E4), 1E2, 1E2)
mat[sample(1:1E4, 5E3 , replace = FALSE)] <- NA
IOvisualize(mat)
maxpoints
min_threshold
mat %>% abs
mat %>% abs %>%
fsort(.,decreasing = TRUE, na.last = TRUE)
mat[!is.na(mat)]
mat[!is.na(mat)] %>% length
mat %>% na.omit %>% length
mat %>% na.omit
IOvisualize(mat)
build()
load_all()
IOvisualize(mat)
min_threshold
build()
load_all()
IOvisualize(mat)
dt
LETTERS
colnames(mat) <- LETTERS
colnames(mat)
colnames(mat) <- rep(LETTERS, length.out = ncol(mat))
colnames(mat)
rownames(mat) <- rep(letters, length.out = nrow(mat))
dt <- my.utils::as.sparse.matrix(mat)
dt
mat
as.sparse.matrix
dt
mat2 <- matrix(NA, ncol = ncol(mat), nrow = nrow(mat))
mat2
dt[1:2]
mat2[as.matrix(dt[,1:2]) <- dt[,3]
mat2[as.matrix(dt[,1:2])] <- dt[,3]
mat2[as.matrix(dt[,1:2])] <- dt[,3]
mat2
as.matrix(dt[,1:2])
mat2 <- matrix(NA, ncol = ncol(mat), nrow = nrow(mat))
mat2[as.matrix(dt %>% as.data.frame %>% .[,1:2])] <- dt[,3]
mat2
mat2[cbind(dt[,1], dt[,2])] <- dt[,3]
mat2 <- matrix(NA, ncol = ncol(mat), nrow = nrow(mat))
mat2
mat2[cbind(dt[,1], dt[,2])] <- dt[,3]
dt <- my.utils::as.sparse.matrix(mat) %>% as.data.frame
mat2[cbind(dt[,1], dt[,2])] <- dt[,3]
mat2
all.equal(mat, mat2)
mat <- matrix(runif(1E4), 1E2, 1E2)
mat[sample(1:1E4, 5E3 , replace = FALSE)] <- NA
#colnames(mat) <- rep(LETTERS, length.out = ncol(mat))
#rownames(mat) <- rep(letters, length.out = nrow(mat))
dt <- my.utils::as.sparse.matrix(mat) %>% as.data.frame
mat2 <- matrix(NA, ncol = ncol(mat), nrow = nrow(mat))
mat2[as.matrix(dt %>% as.data.frame %>% .[,1:2])] <- dt[,3]
mat2[cbind(dt[,1], dt[,2])] <- dt[,3]
all.equal(mat, mat2)
mat
mat2
#colnames(mat) <- rep(LETTERS, length.out = ncol(mat))
#rownames(mat) <- rep(letters, length.out = nrow(mat))
dt <- my.utils::as.sparse.matrix(mat)# %>% as.data.frame
mat2[cbind(dt[,1], dt[,2])] <- dt[,3]
dt
dt[,1]
mat2[cbind(as.numeric(dt[,1]), as.numeric(dt[,2]))] <- dt[,3]
#colnames(mat) <- rep(LETTERS, length.out = ncol(mat))
#rownames(mat) <- rep(letters, length.out = nrow(mat))
dt <- my.utils::as.sparse.matrix(mat)# %>% as.data.frame
mat2 <- matrix(NA, ncol = ncol(mat), nrow = nrow(mat))
mat2[as.matrix(dt %>% as.data.frame %>% .[,1:2])] <- dt[,3]
all.equal(mat, mat2)
#mat2[as.matrix(dt %>% as.data.frame %>% .[,1:2])] <- dt[,3]
mat2[cbind(as.numeric(dt[,1]), as.numeric(dt[,2]))] <- dt[,3]
#mat2[as.matrix(dt %>% as.data.frame %>% .[,1:2])] <- dt[,3]
mat2[cbind(unlist(dt[,1]), unlist(dt[,2]))] <- dt[,3]
all.equal(mat, mat2)
mat <- matrix(runif(1E4), 1E2, 1E2)
mat[sample(1:1E4, 5E3 , replace = FALSE)] <- NA
#colnames(mat) <- rep(LETTERS, length.out = ncol(mat))
#rownames(mat) <- rep(letters, length.out = nrow(mat))
dt <- my.utils::as.sparse.matrix(mat)# %>% as.data.frame
mat2 <- matrix(NA, ncol = ncol(mat), nrow = nrow(mat))
#mat2[as.matrix(dt %>% as.data.frame %>% .[,1:2])] <- dt[,3]
mat2[cbind(unlist(dt[,1]), unlist(dt[,2]))] <- dt[,3]
all.equal(mat, mat2)
unlist(dt[,1])
cbind(unlist(dt[,1]), unlist(dt[,2]))
mat2[cbind(unlist(dt[,1]), unlist(dt[,2]))]
#colnames(mat) <- rep(LETTERS, length.out = ncol(mat))
#rownames(mat) <- rep(letters, length.out = nrow(mat))
dt <- my.utils::as.sparse.matrix(mat) %>% as.data.frame
mat2[cbind(dt[,1], dt[,2])] <- dt[,3]
mat2 <- matrix(NA, ncol = ncol(mat), nrow = nrow(mat))
mat2[cbind(dt[,1], dt[,2])] <- dt[,3]
all.equal(mat, mat2)
all.equal(mat, mat2)
mat2 <- matrix(NA, ncol = length(unique(dt[,1])),
nrow = length(unique(dt[,2])))
#mat2[as.matrix(dt %>% as.data.frame %>% .[,1:2])] <- dt[,3]
mat2[cbind(dt[,1], dt[,2])] <- dt[,3]
all.equal(mat, mat2)
dt
#colnames(mat) <- rep(LETTERS, length.out = ncol(mat))
#rownames(mat) <- rep(letters, length.out = nrow(mat))
dt <- my.utils::as.sparse.matrix(mat)
dt
as.dense.matrix <- function(x, row = 1, col = 2, value = 3) {
mat <- matrix(NA, ncol = length(unique(x[,col])),
nrow = length(unique(x[,row])))
mat[cbind(x[,row], x[,col])] <- x[,value]
return(mat)
}
dt %>% as.dense.matrix()
dt %>% as.dense.matrix() %>%
all.equal(mat, .)
dt
dt[, "row_new" := LETTERS[row]]
dt
mat <- matrix(runif(1E2), 1E1, 1E1)
mat
mat[sample(1:1E2, 5E1 , replace = FALSE)] <- NA
#colnames(mat) <- rep(LETTERS, length.out = ncol(mat))
#rownames(mat) <- rep(letters, length.out = nrow(mat))
dt <- my.utils::as.sparse.matrix(mat)
dt
dt[, "row_new" := LETTERS[row]]
dt
dt[, "col_new" := letters[col]]
dt
dt[, row := NULL]
dt[, col := NULL]
setcolorder(dt, c("row_new", "col_new", "value"))
dt
dt %>% as.dense.matrix() %>%
all.equal(mat, .)
dt %>% as.dense.matrix()
dt %>% as.data.frame %>%  as.dense.matrix()
dt %>% as.data.frame
x <- dt %>% as.data.frame()
x
row <- 1
col <- 2
value <- 3
mat <- matrix(NA, ncol = length(unique(x[,col])),
nrow = length(unique(x[,row])))
mat
mat[cbind(x[,row], x[,col])] <- x[,value]
cbind(x[,row], x[,col])
mat[cbind(x[,row], x[,col])]
as.numeric(x[, row])
numeric(x[, row])
numeric(x[, row])
x[, row] %>%
as.numeric(levels(.))[.]
x[, row] %>%
as.factor
x[, row] %>%
as.factor %>%
as.numeric(levels(.))[.]
x[,row]
x[,row] %>% integer
x[,row] %>% as.integer()
x[,row] %>% as.factor()
x[,row] %>% as.factor() %>% levels()
mat[cbind(x[,row] %>% as.factor, x[,col] %>% as.factor)] <- x[,value]
cbind(x[,row] %>% as.factor, x[,col] %>% as.factor)
mat
#colnames(mat) <- rep(LETTERS, length.out = ncol(mat))
#rownames(mat) <- rep(letters, length.out = nrow(mat))
dt <- my.utils::as.sparse.matrix(mat)
x <- dt %>% as.data.frame()
mat <- matrix(NA, ncol = length(unique(x[,col])),
nrow = length(unique(x[,row])))
mat[cbind(x[,row] %>% as.factor, x[,col] %>% as.factor)] <- x[,value]
mat
x
x[,row] %>% as.factor
rm(x, row, col, value)
as.dense.matrix <- function(x, row = 1, col = 2, value = 3) {
mat <- matrix(NA, ncol = length(unique(x[,col])),
nrow = length(unique(x[,row])))
mat[cbind(as.factor(x[,row]), as.factor(x[,col]))] <- x[,value] # as.factor needed to also work with non-integers row/col IDs
return(mat)
}
dt %>% as.data.frame %>%  as.dense.matrix()
#colnames(mat) <- rep(LETTERS, length.out = ncol(mat))
#rownames(mat) <- rep(letters, length.out = nrow(mat))
dt <- my.utils::as.sparse.matrix(mat)
dt[, "row_new" := LETTERS[row]]
dt[, "col_new" := letters[col]]
dt[, row := NULL]
dt[, col := NULL]
setcolorder(dt, c("row_new", "col_new", "value"))
dt %>% as.data.frame %>%  as.dense.matrix()
dt  %>%  as.dense.matrix()
mode(dt)
as.dense.matrix <- function(x, row = 1, col = 2, value = 3) {
if (mode(x) != "data.frame") x <- as.data.frame(x)
mat <- matrix(NA, ncol = length(unique(x[,col])),
nrow = length(unique(x[,row])))
mat[cbind(as.factor(x[,row]), as.factor(x[,col]))] <- x[,value] # as.factor needed to also work with non-integers row/col IDs
return(mat)
}
dt  %>%  as.dense.matrix()
x <- dt %>% as.data.frame()
row <- 1
col <- 2
value <- 3
as.factor(x[,row])
levels(as.factor(x[,row]))
as.dense.matrix <- function(x, row = 1, col = 2, value = 3) {
if (mode(x) != "data.frame") x <- as.data.frame(x)
mat <- matrix(NA, ncol = length(unique(x[,col])),
nrow = length(unique(x[,row])))
mat[cbind(as.factor(x[,row]), as.factor(x[,col]))] <- x[,value] # as.factor needed to also work with non-integers row/col IDs
if(is.character(x[,row]) | is.character(x[,col])) {
rownames(mat) <- levels(as.factor(x[,row]))
colnames(mat) <- levels(as.factor(x[,col]))
}
return(mat)
}
dt  %>%  as.dense.matrix()
dt
mode(mat)
typeof(mat)
is.matrix(mat)
build()
load_all()
IOvisualize(mat)
IOvisualize(dt)
dt
as.dense.matrix <- function(x, row = 1, col = 2, value = 3,
keep.names = TRUE) {
if (mode(x) != "data.frame") x <- as.data.frame(x)
mat <- matrix(NA, ncol = length(unique(x[,col])),
nrow = length(unique(x[,row])))
mat[cbind(as.factor(x[,row]), as.factor(x[,col]))] <- x[,value] # as.factor needed to also work with non-integers row/col IDs
if(isTRUE(keep.names) & (is.character(x[,row]) | is.character(x[,col]))) {
rownames(mat) <- levels(as.factor(x[,row]))
colnames(mat) <- levels(as.factor(x[,col]))
}
return(mat)
}
dt
IOvisualize(dt)
document()
build()
