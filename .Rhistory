as.numeric(na.exclude(as.numeric(mat))))
expect_equal(ncol(as.sparse.matrix(mat)),
3)
expect_equal(
ncol(as.sparse.matrix(mat,
colnames = data.table(Var1 = LETTERS[1:3], Var2 = letters[1:3]),
rownames = data.table(Var1 = LETTERS[4:6], Var2 = letters[4:6]))),
5
)
expect_equal(
as.dense.matrix(as.sparse.matrix(mat)),
mat
)
})
IOvisualize(mat)
test_that('IO visualations work', {
expect_output(IOvisualize(mat))
})
expect_success(IOvisualize(mat))
test_that('IO visualations work', {
expect_output(IOvisualize(mat))
expect_success(IOvisualize(mat))
})
test_that('IO visualations work', {
expect_output(IOvisualize(mat))
expect_silent(IOvisualize(mat))
})
test_that('IO visualations work', {
expect_output(IOvisualize(mat))
expect_silent(IOvisualize(mat))
})
test_that('IO visualations work', {
expect_silent(IOvisualize(mat))
})
expect_silent(IOvisualize(3))
test_that('IO visualations work', {
expect_silent(IOvisualize(mat))
expect_silent(IOvisualize(3))
})
mats <- as.sparse.matrix(mat)
mats
expect_silent(IOvisualize(mats))
IOvisualize(mats)
mats
mats2 <- copy(mats)
mats2[, row := as.character(row), col := as.character(col)]
mats2 <- copy(mats)
mats2[, row := as.character(row), col := as.character(col)]
mats2[, row := as.character(row)]
mats2[, col := as.character(col)]
test_that('IO visualations work', {
expect_silent(IOvisualize(mat))
expect_silent(IOvisualize(mats))
expect_silent(IOvisualize(mats2))
})
IOvisualize(mats2)
expect_silent(IOvisualize(mats2, attributes = mats2[, 1:2]))
IOvisualize(mats2, attributes = mats2[, 1:2])
mats2[, 1:2]
expect_silent(IOvisualize(mats, attributes = mats2[, 1:2]))
IOvisualize
expect_silent(IOvisualize(mats, attributes = list(mats2[, 1], mats2[,2]))
})
expect_silent(IOvisualize(mats, attributes = list(mats2[, 1], mats2[,2])))
mats2[, 1]
mats2[,2]
expect_silent(IOvisualize(mats, attributes = list(mats2[, 1], mats2[,2])))
mats2
expect_silent(IOvisualize(mats, attributes = list('row' = mats2[, 1],
'col' = mats2[,2])))
IOvisualize(mats, attributes = list('row' = mats2[, 1],
'col' = mats2[,2]))
?head
utils::head.matrix()
library(usethis)
pkgpath <- file.path(tempdir(), "testpkg")
create_package(pkgpath) # creates package below temp directory
proj_set(pkgpath)
## create github repository and configure as git remote
use_github()
## now, working inside "testpkg", initialize git repository
use_git()
## create github repository and configure as git remote
use_github()
## now, working inside "testpkg", initialize git repository
use_git()
## create github repository and configure as git remote
use_github()
brown()
browse_github_token()
edit_r_environ()
github_token()
#' Title
#'
#' @return
#' @export
#'
#' @examples
restartR <- function() {
.rs.restartR()
}
restartR()
github_token()
proj_set(pkgpath)
pkgpath
pkgpath <- file.path(tempdir(), "testpkg")
create_package(pkgpath) # creates package below temp directory
## now, working inside "testpkg", initialize git repository
use_git()
proj_set(pkgpath)
## now, working inside "testpkg", initialize git repository
use_git()
## create github repository and configure as git remote
use_github()
browse_github_token()
gh_token_help(host = NULL)
gitcreds::gh_token_help(host = NULL)
library(gitcreds)
gh_token_help(host = NULL)
library(usethi)
library(usethis)
proj_set(pkgpath)
## create github repository and configure as git remote
use_github()
edit_r_environ()
use_github()
restartR()
pkgpath <- file.path(tempdir(), "testpkg")
create_package(pkgpath) # creates package below temp directory
proj_set(pkgpath)
## now, working inside "testpkg", initialize git repository
use_git()
## create github repository and configure as git remote
use_github()
restartR()
pkgpath <- file.path(tempdir(), "testpkg")
create_package(pkgpath) # creates package below temp directory
proj_set(pkgpath)
## now, working inside "testpkg", initialize git repository
use_git()
## now, working inside "testpkg", initialize git repository
use_git(message = "Initial commit")
## create github repository and configure as git remote
use_github()
pkgpath <- file.path(tempdir(), "testpkg")
create_package(pkgpath) # creates package below temp directory
pkgpath <- file.path(tempdir(), "testpkg")
create_package(pkgpath) # creates package below temp directory
proj_set(pkgpath)
## now, working inside "testpkg", initialize git repository
use_git(message = "Initial commit")
## create github repository and configure as git remote
use_github()
restartR()
pkgpath <- file.path(tempdir(), "testpkg")
create_package(pkgpath, rstudio = FALSE) # creates package below temp directory
proj_set(pkgpath)
## now, working inside "testpkg", initialize git repository
use_git(message = "Initial commit")
## create github repository and configure as git remote
use_github()
github_token()
## create github repository and configure as git remote
use_github(private = TRUE)
github_token()
browse_github_token()
Sys.getenv('GITHUB_PAT')
## create github repository and configure as git remote
use_github(private = TRUE)
pkgpath <- file.path(tempdir(), "testpkg")
create_package(pkgpath, rstudio = FALSE) # creates package below temp directory
pkgpath <- file.path(tempdir(), "testpkg")
pkgpath
create_package(pkgpath, rstudio = FALSE) # creates package below temp directory
pkgpath <- file.path(tempdir(), "testpkg")
create_package(pkgpath, rstudio = FALSE) # creates package below temp directory
proj_set(pkgpath)
## now, working inside "testpkg", initialize git repository
use_git(message = "Initial commit")
## create github repository and configure as git remote
use_github(private = TRUE)
restartR()
tempdir()
tempdir()
tempdir()
tempdir()
tempdir()
library(usethis)
tempdir()
pkgpath <- file.path(tempdir(), "testpkg")
create_package(pkgpath, rstudio = FALSE) # creates package below temp directory
proj_set(pkgpath)
## now, working inside "testpkg", initialize git repository
use_git(message = "Initial commit")
## create github repository and configure as git remote
use_github(private = TRUE)
## now, working inside "testpkg", initialize git repository
use_git(message = "Initial commit")
## create github repository and configure as git remote
use_github(private = TRUE)
browse_github_token()
gh_token_help(host = NULL)
package_version('gh')
packageVersion('gh')
install.packages('gh')
install.packages("gh")
library(usethis)
pkgpath <- file.path(tempdir(), "testpkg")
create_package(pkgpath, rstudio = FALSE) # creates package below temp directory
proj_set(pkgpath)
## now, working inside "testpkg", initialize git repository
use_git(message = "Initial commit")
## create github repository and configure as git remote
use_github(private = TRUE)
use_readme_rmd()
use_github_action_pr_commands()
tempdir()
tempdir()
tempdir()
use_git('/tmp/tex')
proj_set('/tmp/tex')
start_new_project <- function(name,
root_dir = '/home/simon/Documents',
rproject = name, # character or NULL
git = TRUE,
github = FALSE
) {
project_dir <- file.path(root_dir, name)
code_dir <- file.path(project_dir, 'code')
dir.create(code_dir, recursive = TRUE)
dir.create(file.path(project_dir, 'tex'))
dir.create(file.path(project_dir, 'data'))
dir.create(file.path(project_dir, 'figures'))
dir.create(file.path(project_dir, 'documentation'))
dir.create(file.path(project_dir, 'misc'))
dir.create(file.path(project_dir, 'tmp'))
if (!is.null(rproject)) {
create_project(file.path(code_dir, rproject))
if (git) {
proj_set(file.path(code_dir, rproject))
use_git()
if (github) {
use_github(private = TRUE)
}
}
}
}
start_new_project('test')
start_new_project <- function(name,
root_dir = '/home/simon/Documents',
rproject = name, # character or NULL
git = TRUE,
github = TRUE
) {
project_dir <- file.path(root_dir, name)
code_dir <- file.path(project_dir, 'code')
dir.create(code_dir, recursive = TRUE)
dir.create(file.path(project_dir, 'tex'))
dir.create(file.path(project_dir, 'data'))
dir.create(file.path(project_dir, 'figures'))
dir.create(file.path(project_dir, 'documentation'))
dir.create(file.path(project_dir, 'misc'))
dir.create(file.path(project_dir, 'tmp'))
if (!is.null(rproject)) {
create_project(file.path(code_dir, rproject))
if (git) {
proj_set(file.path(code_dir, rproject))
use_git()
if (github) {
use_github(private = TRUE)
}
}
}
}
start_new_project('test')
start_new_project <- function(name,
root_dir = '/home/simon/Documents',
rproject = name, # character or NULL
git = TRUE,
github = TRUE
) {
project_dir <- file.path(root_dir, name)
code_dir <- file.path(project_dir, 'code')
dir.create(code_dir, recursive = TRUE)
dir.create(file.path(project_dir, 'tex'))
dir.create(file.path(project_dir, 'data'))
dir.create(file.path(project_dir, 'figures'))
dir.create(file.path(project_dir, 'documentation'))
dir.create(file.path(project_dir, 'misc'))
dir.create(file.path(project_dir, 'tmp'))
if (!is.null(rproject)) {
create_project(file.path(code_dir, rproject))
if (git) {
proj_set(file.path(code_dir, rproject))
use_git()
if (github) {
use_github(private = TRUE)
}
}
}
}
start_new_project('test')
start_new_project <- function(name,
root_dir = '/home/simon/Documents',
rproject = name, # character or NULL
git = TRUE,
github = TRUE
) {
project_dir <- file.path(root_dir, name)
code_dir <- file.path(project_dir, 'code')
dir.create(code_dir, recursive = TRUE)
dir.create(file.path(project_dir, 'tex'))
dir.create(file.path(project_dir, 'data'))
dir.create(file.path(project_dir, 'figures'))
dir.create(file.path(project_dir, 'documentation'))
dir.create(file.path(project_dir, 'misc'))
dir.create(file.path(project_dir, 'tmp'))
if (!is.null(rproject)) {
create_project(file.path(code_dir, rproject), open = FALSE)
if (git) {
proj_set(file.path(code_dir, rproject))
use_git()
if (github) {
use_github(private = TRUE)
}
}
}
}
start_new_project('test')
start_new_project <- function(name,
root_dir = '/home/simon/Documents/Projects',
rproject = name, # character or NULL
git = TRUE,
github = TRUE
) {
project_dir <- file.path(root_dir, name)
code_dir <- file.path(project_dir, 'code')
dir.create(code_dir, recursive = TRUE)
dir.create(file.path(project_dir, 'tex'))
dir.create(file.path(project_dir, 'data'))
dir.create(file.path(project_dir, 'figures'))
dir.create(file.path(project_dir, 'documentation'))
dir.create(file.path(project_dir, 'misc'))
dir.create(file.path(project_dir, 'tmp'))
if (!is.null(rproject)) {
create_project(file.path(code_dir, rproject), open = FALSE)
if (git) {
proj_set(file.path(code_dir, rproject))
use_git()
if (github) {
use_github(private = TRUE)
}
}
}
}
start_new_project('import_proportionality', rproject = FALSE)
devtools::load_all()
start_new_project('import_proportionality', rproject = FALSE)
library(usethis)
start_new_project('import_proportionality', rproject = FALSE)
start_new_project <- function(name,
root_dir = '/home/simon/Documents/Projects',
rproject = name, # character or NULL
git = TRUE,
github = TRUE
) {
project_dir <- file.path(root_dir, name)
code_dir <- file.path(project_dir, 'code')
dir.create(code_dir, recursive = TRUE)
dir.create(file.path(project_dir, 'tex'))
dir.create(file.path(project_dir, 'data'))
dir.create(file.path(project_dir, 'figures'))
dir.create(file.path(project_dir, 'documentation'))
dir.create(file.path(project_dir, 'misc'))
dir.create(file.path(project_dir, 'tmp'))
if (!is.null(rproject) & isFALSE(rproject)) {
create_project(file.path(code_dir, rproject), open = FALSE)
if (git) {
proj_set(file.path(code_dir, rproject))
use_git()
if (github) {
use_github(private = TRUE)
}
}
}
}
start_new_project('import_proportionality', rproject = NULL)
start_new_project <- function(name,
root_dir = '/home/simon/Documents/Projects',
rproject = name, # character or NULL
git = TRUE,
github = TRUE
) {
project_dir <- file.path(root_dir, name)
code_dir <- file.path(project_dir, 'code')
dir.create(code_dir, recursive = TRUE)
dir.create(file.path(project_dir, 'tex'))
dir.create(file.path(project_dir, 'data'))
dir.create(file.path(project_dir, 'figures'))
dir.create(file.path(project_dir, 'documentation'))
dir.create(file.path(project_dir, 'misc'))
dir.create(file.path(project_dir, 'tmp'))
dir.create(file.path(project_dir, 'spreadsheets'))
if (!is.null(rproject) & isFALSE(rproject)) {
create_project(file.path(code_dir, rproject), open = FALSE)
if (git) {
proj_set(file.path(code_dir, rproject))
use_git()
if (github) {
use_github(private = TRUE)
}
}
}
}
start_new_project <- function(name,
root_dir = '/home/simon/Documents/Projects',
rproject = name, # character or NULL
git = TRUE,
github = TRUE
) {
project_dir <- file.path(root_dir, name)
if (dir.exists(project_dir)) {
stop('Project directory already exists.')
}
code_dir <- file.path(project_dir, 'code')
dir.create(code_dir, recursive = TRUE)
dir.create(file.path(project_dir, 'tex'))
dir.create(file.path(project_dir, 'data'))
dir.create(file.path(project_dir, 'figures'))
dir.create(file.path(project_dir, 'documentation'))
dir.create(file.path(project_dir, 'misc'))
dir.create(file.path(project_dir, 'tmp'))
dir.create(file.path(project_dir, 'spreadsheets'))
if (!is.null(rproject) & isFALSE(rproject)) {
create_project(file.path(code_dir, rproject), open = FALSE)
if (git) {
proj_set(file.path(code_dir, rproject))
use_git()
if (github) {
use_github(private = TRUE)
}
}
}
}
start_new_project('import_proportionality', rproject = NULL)
start_new_project('import_proportionality', rproject = NULL)
library(devtools)
document()
document()
document()
Stat
document()
load_all()
library(devtools)
use_devtools()
use_devtools()
use_git_config(user.name = 'Simon Schulte',
user.email = 's.pedro@gmx.de')
git_sitrep()
gh_token_help()
create_github_token()
gitcreds::gitcreds_set()
gh_token_help()
git_sitrep()
create_github_token()
create_github_token()
gitcreds::gitcreds_set()
gitcreds::gitcreds_set()
git_sitrep()
#'
#'
#'
#' @author Simon Schulte
#' Date: 2021-10-21 13:00:14
#'
#' Content:
#'
############################################################################## #
##### load packages ############################################################
############################################################################## #
library(data.table)
library(tidyverse)
library(my.utils)
library(units)
############################################################################## #
##### settings #################################################################
############################################################################## #
options("datatable.print.class" = TRUE)
theme_set(theme_bw())
path2UNFCCC <- '/home/simon/Documents/Projects/Uncertainty_Extensions/code/UNFCCC_playground/temp_results'
path2eurostat <- '/home/simon/Documents/PhD_PROSET/data/Eurostat'
gases <- c('CO2', 'CH4', 'N2O')
iparty <- 'Germany'
iyear <- 2015
igas <- 'CO2'
convert_NACErev2_to_tree <- function(x, code) {
# currently only works until 2nd level (eg. A03, C11, ...)
level1_vec <- x[get(code) %in% LETTERS][[code]]
for (i in level1_vec) {
x[grepl(i, x[[code]]), code_tree := i]
}
x[nchar(get(code)) > 1, code_tree := paste0(code_tree, '.', get(code))]
x[, code_tree := paste0('TOTAL.', code_tree)]
tree <- as.Node(x, pathName = 'code_tree', pathDelimiter = '.')
return(tree)
}
# 2. load eurostat fuel use data ==========================================================
data_fuel_use <- readRDS('./temp_results/env_ac_pefasu_cleaned.RData')
data_fuel_use <- data_fuel_use[geo == 'DE'
& time == iyear]
# 2. load eurostat fuel use data ==========================================================
data_fuel_use <- readRDS('./temp_results/env_ac_pefasu_cleaned.RData')
