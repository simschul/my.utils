############################################################################## # 
##### functions #################################################################
############################################################################## # 

# 1. Environmental DAta Preprocessing ------------------------------------------

#' Title
#'
#' @param temperature 
#' @param precipitation 
#'
#' @return
#' @export
#'
#' @examples
calculate_aridity_index <- function(temperature, precipitation) {
  ai <- (12 * precipitation) / (temperature + 10)
  return(ai)
}

# data accumulation (line 399 ff, equation 6a, 6b)

#' Title
#'
#' @param s 
#' @param t 
#'
#' @return
#' @export
#'
#' @examples

weighting_fun <- function(s, t) {
  # equation 6b (Yue et al.)
  if(t < 0 | t > s) {
    stop("Constraint: 0 <= t <= s")
  }
  (s + 1 - t) / ((s + 1) * ((s / 2) + 1))
}




#' Title
#'
#' @param variable.vec 
#' @param lag.length 
#' @param t 
#'
#' @return
#' @export
#'
#' @examples

data_accumulation <- function(variable.vec, lag.length, t = 0) {
  if((lag.length - t + 1) != length(variable.vec)) {
    stop("The length of the variable vector does not equal the number of iterations (defined by lag.length - t)")
  }
  temp <- 0
  for(i in t:lag.length) {
    w <- weighting_fun(s = lag.length, t = i)
    temp <- temp + (w * variable.vec[i+1])
  }
  return(temp)
} 

get_5year_window <- function(index) {
  if(index < 5) return(index:1)
  else return(index:(index-4))
}


#' Title
#'
#' @param x a time series with yearly observations
#'
#' @return
#' @export
#'
#' @examples
calculate_weighted5year_mean <- function(x) {
  x.weighted <- vector(mode = "numeric", length = length(x))
  for(i in 1:length(x))  {
    #cat(i, "\t")
    window <- get_5year_window(i)
    #cat(window, "\n")
    x.weighted[i] <- data_accumulation(x[window], 
                                       lag.length = length(window) - 1)
  }
  return(x.weighted)
  # return(data.table("year" = years,
  #                   "x" = x.weighted))
}

#calculate_weighted5year_mean(rnorm(100), 1900:1999)


# 2. Calculate Site Index ---------------------------------------------------------

#' Title
#'
#' @param SI.current 
#' @param temperature 
#' @param precipitation 
#' @param nitrogen 
#' @param parameters 
#' @param print.formula 
#'
#' @return
#' @export
#'
#' @examples
calculate_SI <- function(SI.current, # si in year t 
                         temperature, #  mean temperatur growing season in year t
                         precipitation, # precipitaion sum in year t
                         aridity.index,
                         nitrogen, # total nitrogen deposition in year t
                         parameters, # vector of 7 model parameters
                         print.formula = FALSE
) {
  
  # aridity.index <- calculate_aridity_index(temperature = temperature, 
  #                                          precipitation = precipitation)
  
  si.new <- parameters[1] * SI.current^parameters[2] * 
    exp(parameters[3] * temperature + 
          parameters[4] * precipitation + 
          parameters[5] * aridity.index + 
          parameters[6] * nitrogen + 
          parameters[7] * precipitation * nitrogen)
  if(print.formula) {
    cat(paste0(si.new," ~ ", 
               parameters[1], " * " ,
               SI.current^parameters[2], " * ",
               "exp(", parameters[3], " * ", 
               temperature, " + ", 
               parameters[4], " * ", 
               precipitation, " + ", 
               parameters[5], " * ", 
               aridity.index , " + ", 
               parameters[6], " * ", 
               nitrogen , " + ", 
               parameters[7], " * ", 
               precipitation , " * ", 
               nitrogen,")"))
  }
  return(si.new)
}




calculate_SI_timeseries <- function(SI.current, # si in year t 
                                    n.years, # number of years to run SI simulation
                                    temperature, #  mean temperatur growing season in year t
                                    precipitation, # precipitaion sum in year t
                                    aridity.index,
                                    nitrogen, # total nitrogen deposition in year t
                                    parameters) {
  result <- vector(mode = "numeric", length = n.years + 1)
  result[1] <- SI.current
  for(i in 1:n.years) {
    result[i + 1] <- calculate_SI(SI.current =  result[i], 
                                  temperature =  temperature, 
                                  precipitation =  precipitation, 
                                  aridity.index =  aridity.index,
                                  nitrogen = nitrogen, 
                                  parameters = parameters)
  }
  return(result)
  
  
}


# 3. Other ---------------------------------------------------------
convert_raster2dt <- function(raster, na.rm = TRUE, xy = TRUE) {
  as.data.frame(raster, xy = xy, na.rm = na.rm) %>%
    as.data.table
}

create_named_list <- function(names) {
  vector(mode = "list", length(names)) %>% 
    setNames(names)
  
} 

omit_x_axes <-  ggplot2::theme(axis.title.x=element_blank(),
                      axis.text.x=element_blank(),
                      axis.ticks.x=element_blank())




